/* Generated By:JavaCC: Do not edit this line. BonxaiJJParserConstants.java */
package eu.fox7.schematoolkit.bonxai.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BonxaiJJParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int QUOTE = 5;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int ROOTS = 7;
  /** RegularExpression Id. */
  int GRAMMAR = 8;
  /** RegularExpression Id. */
  int TARGET_NAMESPACE = 9;
  /** RegularExpression Id. */
  int NAMESPACE = 10;
  /** RegularExpression Id. */
  int TYPE = 11;
  /** RegularExpression Id. */
  int DEFAULTT = 12;
  /** RegularExpression Id. */
  int DATATYPES = 13;
  /** RegularExpression Id. */
  int IMPORT = 14;
  /** RegularExpression Id. */
  int CONSTRAINTS = 15;
  /** RegularExpression Id. */
  int UNIQUE = 16;
  /** RegularExpression Id. */
  int KEY = 17;
  /** RegularExpression Id. */
  int KEYREF = 18;
  /** RegularExpression Id. */
  int GROUPS = 19;
  /** RegularExpression Id. */
  int GROUP = 20;
  /** RegularExpression Id. */
  int ATTRIBUTEGROUP = 21;
  /** RegularExpression Id. */
  int ATTRIBUTEREF = 22;
  /** RegularExpression Id. */
  int ATTRIBUTE = 23;
  /** RegularExpression Id. */
  int MIXED = 24;
  /** RegularExpression Id. */
  int EMPTY = 25;
  /** RegularExpression Id. */
  int NILLABLE = 26;
  /** RegularExpression Id. */
  int ELEMENTREF = 27;
  /** RegularExpression Id. */
  int ELEMENT = 28;
  /** RegularExpression Id. */
  int STRICT = 29;
  /** RegularExpression Id. */
  int LAX = 30;
  /** RegularExpression Id. */
  int SKIPP = 31;
  /** RegularExpression Id. */
  int FIXED = 32;
  /** RegularExpression Id. */
  int ANY = 33;
  /** RegularExpression Id. */
  int ANYATTRIBUTE = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int NAMEX = 36;
  /** RegularExpression Id. */
  int CONSTANT = 37;
  /** RegularExpression Id. */
  int OPENING_ROUND_BRACKET = 38;
  /** RegularExpression Id. */
  int CLOSING_ROUND_BRACKET = 39;
  /** RegularExpression Id. */
  int OPENING_SQUARED_BRACKET = 40;
  /** RegularExpression Id. */
  int CLOSING_SQUARED_BRACKET = 41;
  /** RegularExpression Id. */
  int OPENING_CURLY_BRACKET = 42;
  /** RegularExpression Id. */
  int CLOSING_CURLY_BRACKET = 43;
  /** RegularExpression Id. */
  int EQUALS = 44;
  /** RegularExpression Id. */
  int COMMA = 45;
  /** RegularExpression Id. */
  int AT = 46;
  /** RegularExpression Id. */
  int OR = 47;
  /** RegularExpression Id. */
  int ANDLITERAL = 48;
  /** RegularExpression Id. */
  int DOUBLESLASH = 49;
  /** RegularExpression Id. */
  int SLASH = 50;
  /** RegularExpression Id. */
  int STAR = 51;
  /** RegularExpression Id. */
  int PLUS = 52;
  /** RegularExpression Id. */
  int QUESTION_MARK = 53;
  /** RegularExpression Id. */
  int COLON = 54;
  /** RegularExpression Id. */
  int POINT = 55;
  /** RegularExpression Id. */
  int PERCENT = 56;
  /** RegularExpression Id. */
  int ANNOTATION_VALUE = 57;
  /** RegularExpression Id. */
  int DIGIT = 58;
  /** RegularExpression Id. */
  int BASECHAR = 59;
  /** RegularExpression Id. */
  int IDEOGRAPHIC = 60;
  /** RegularExpression Id. */
  int COMBINING_CHAR = 61;
  /** RegularExpression Id. */
  int EXTENDER = 62;
  /** RegularExpression Id. */
  int LABEL = 63;
  /** RegularExpression Id. */
  int PROTOCOL = 64;
  /** RegularExpression Id. */
  int URI = 65;
  /** RegularExpression Id. */
  int QUOTATION = 66;
  /** RegularExpression Id. */
  int QUOT_QUOTE = 67;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int NAME = 1;
  /** Lexical state. */
  int URIX = 2;
  /** Lexical state. */
  int QUOTATIONX = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\\"\"",
    "<SINGLE_LINE_COMMENT>",
    "\"roots\"",
    "\"grammar\"",
    "\"target namespace\"",
    "\"namespace\"",
    "\"type\"",
    "\"default\"",
    "\"datatypes \"",
    "\"import\"",
    "\"constraints\"",
    "\"unique\"",
    "\"key\"",
    "\"keyref \"",
    "\"groups\"",
    "\"group\"",
    "\"attribute-group\"",
    "\"attributeref\"",
    "\"attribute\"",
    "\"mixed\"",
    "\"empty\"",
    "\"nillable\"",
    "\"elementref\"",
    "\"element\"",
    "\"strict\"",
    "\"lax\"",
    "\"skip\"",
    "\"fixed\"",
    "\"any\"",
    "\"anyattribute\"",
    "\"not\"",
    "\"name\"",
    "<CONSTANT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\",\"",
    "\"@\"",
    "\"|\"",
    "\"&\"",
    "\"//\"",
    "\"/\"",
    "\"*\"",
    "\"+\"",
    "\"?\"",
    "\":\"",
    "\".\"",
    "\"%\"",
    "\"annotation\"",
    "<DIGIT>",
    "<BASECHAR>",
    "<IDEOGRAPHIC>",
    "<COMBINING_CHAR>",
    "<EXTENDER>",
    "<LABEL>",
    "<PROTOCOL>",
    "<URI>",
    "<QUOTATION>",
    "\"\\\"\"",
  };

}
