##
# Start symbol
#
# Main entry point of the Bonxai grammar
##
Bonxai              ::= Decl* GroupBlock? Block ConstraintBlock?

##
# Declaration at the beginning of an UPSL document
# 
# Declarations of namespace indentifiers and default namespaces are defined
# here. Furthermore the possibility to import xmlschema data types is given
# here.
#
# To import other XML Schemas or UPSL files the import declaration may be
# used.  Optionally a url can be given to specify the document location
# independently from the namespace url.
##
Decl                ::= "namespace" Identifier "=" NamespaceUriLiteral
                      | "default" "namespace" NamespaceUriLiteral
                      | "datatypes" Identifier "=" URL
                      | "import" NamespaceUriLiteral ( "=" URL )?

##
# Constraint section of the Bonxai document
# 
# An arbitrary amount of constraints may be defined iniside this block
##
ConstraintBlock     ::= "constraints" "{" Constraint+ "}"

##
# Different kinds of constraints which may be used 
#
# Constraints are used to define unique values, keys or key references
##
Constraint          ::= UniqueConstraint | KeyConstraint | KeyRefConstraint

##
# Unique constraint definition, consisting of an APattern which defines the
# subtree the constraint acts upon, and a sector plus fields, like in XSD.
##
UniqueConstraint    ::= "unique" APattern "{" ConstraintSelector ConstraintFields "}"

##
# Key constraint definition, consisting of a name and an APattern which
# defines the subtree the constraint acts upon, and a sector plus fields, like
# in XSD.
#
# The name is referenced by the KeyRefConstraint associated with the key
##
KeyConstraint       ::= "key" Name APattern "{" ConstraintSelector ConstraintFields "}"

##
# KeyRef constraint definition, consisting of a name and an APattern which
# defines the subtree the constraint acts upon, and a sector plus fields, like
# in XSD.
#
# The name refenrences the KeyConstraint associated with the keyRef
##
KeyRefConstraint    ::= "keyref" Name APattern "{" ConstraintSelector ConstraintFields "}"

##
# The constraint selector is just a single XPath expression
##
ConstraintSelector  ::= XPath

##
# The constraint fields are a list of XPath expressions
##
ConstraintFields    ::= "{" XPath ( "," XPath )* "}"

##
# Group section of the Bonxai document
# 
# An arbitrary amount of groups may be defined in here.
# These groups can later on be used inside Bonxai rules to minimize the amount
# of redundant information.
##
GroupBlock          ::= "groups" "{" GroupRule+ "}"

##
# Group rule inside the group block
#
# Groups as well as attribute-groups may be defined here
##
GroupRule           ::= "group" Name "=" Regex
                      | "attribute-group" Name "=" "{" AttributePattern "}"

##
# Main block of an Bonxai document
# 
# This block defines the main ruleset used to define xml structures. An
# arbitrary amount of Rules (expressions) may be used.
## 
Block               ::= "grammar" "{" Roots Expr* "}"

##
# Subblock of the main Block that defines the set of elements that are 
# allowed to occur at the root of the matching XML documents
##

Roots               ::= "roots" "{" (Name ( "," Name)* )? "}"

##
# Expression describing one aspect of the xml structure
# 
# Every expression is a ancestor pattern with an assigned child pattern.
# Optionally a CPattern may be mixed to include text as well as other defined
# elements.
##
Expr                ::= Annotations? APattern "=" "mixed"? CPattern

##
# Annotations contain additional arbitrary information for the parser.
#
# There is no fixed list of available annotations - it is up to the parser
# which annotations are supported. One supported annotation could be the name
# of group the XSD schema, like "XsdElementName".
##
Annotations         ::= ( Annotation )+

##
# An annotation consists of an annotation key and an associated value of any
# structure. We separate annotation key and annotation value by a whitespace.
# The annotation value is the remainder of the line until the first \r or \n is reached.
# Example: the annotation
# @name value 
# represents the annotation where "name" is the annotation name and "value" is the annotation value.
# The annotation
# @ name value
# represents the annotation where the annotation name is "" and the annotation value is "name value".
# The whitespace separating the annotation name and annotation value can be any whitespace, except \r and \n.
##
Annotation            ::= "@" AnnotationName? (" " AnnotationValue)?


##
# Each annotation name is required to start with an @, followed by letters.
##
AnnotationName      ::= ["a"-"z", "A"-"Z"]+

##
# The annotation value may consist of any value, except for line breaks.
##
AnnotationValue     ::= ~["\r", "\n"]+


##
# Ancestor pattern
#
# The ancestor pattern allows the full power of regex to be used for
# ancestor paths.
# The starting / or // is optional. If it is omitted the default behaviour
# "//" will be used.
##

APattern            ::= SimpleAPattern | FullAPattern

##
# SimpleAPatterns are ancestor patterns that do not require a path separator 
# (/ or //) at the start. They are used to allow a DTD-like syntax 
# for DTD-like schemas.
##
SimpleAPattern       ::= Name FullAPattern?
			 | "(" SimpleAPatternOr ")"

SimpleAPatternOr     ::= SimpleAPattern ("|" SimpleAPattern)*


##
# FullAPattern
# 
# FullAPatterns have the power of full regular expressions over ancestor paths.
# The production contains no rule of the form 
# FullAPattern ::= FullAPattern FullAPattern 
# to avoid left recursion in javacc (bonXaiTree.jjt)
##

FullAPattern       ::=    PathSeparator SimpleAPattern (FullAPattern)?
                               | "(" FullAPatternOr ")" Operator? (FullAPattern)?
                
FullAPatternOr     ::= FullAPattern ("|" FullAPattern)*

PathSeparator      ::= "/" | "//"

Operator           ::= "*" | "+" | "?"


##
# Child pattern
# 
# A child pattern is divided into a attribute part and an element part.
##
CPattern            ::= "{" ( AttributePattern "," )? ElementPattern "}"

##
# Pattern defining elements
#
# An element pattern may be empty or a mixed regex
##
ElementPattern      ::= "empty"
                      | MixedRegex

##
# Mixed regex
#
# A mixed regex can is either a normal regex pattern, a pattern using the all
# operator or a simple plain Bonxai type
##
MixedRegex          ::= ("missing" "|")?  All
                      | ("missing" "|")? Regex
                      | BonxaiType

##
# All type regex
# 
# Child pattern regex used to reflect the <all> type in xml schema
# This type can not be combined with other regex types, therefore it has its
# own definition.
##
All                 ::= NamedType "?"? ( "&" NamedType "?"? )+

##
# Default child pattern regex
#
# Default regex definition for the child pattern
# Old version: 
# Regex               ::= Regex ( "*" | "+" | "?" | "[" Number ( "," NumberOrUnbounded )? "]" )?
#                       | Regex "," Regex
#                       | Regex "|" Regex
#                       | "(" Regex ")"
#                       | NamedType
# Rule below should avoid left recursion.
# Warning: The rule is of the form X ::= A (Y_1 | Y_2) | B (Z_1 | Z_2). It contains a nested "or". 
##

Regex   :: =   "(" Regex ")" ( "*" | "+" | "?" | "[" Number ( "," (NumberOrUnbounded) )? "]" )? 
                       ( ("," Regex)? | ("|" Regex)? )
             | NamedType ( "*" | "+" | "?" | "[" Number ( "," NumberOrUnbounded) )? "]" )? 
                       ( ("," Regex)? | ("|" Regex)? )


NumberOrUnbounded	::= Number | "*"

##
# Named type
#
# Element or group with a defined name
##
NamedType           ::= "element" Name ( "{" BonxaiType "}" )?
                      | "group" Name
                      | Foreign "element" "*" ( "[" Number ( "," Number )? "]" )? NameSpaceList

##
# Attribute pattern
#
# List of attributes with an optional foreign attribute namespace definition
##
AttributePattern    ::= Foreign "attribute" "*" NameSpaceList ( "," AttributeList )?
                      | AttributeList

##
# List of attributes
#
# List of attributes or attribute groups
##
AttributeList       ::= ( 
                        "attribute" Name "{" AttrBonxaiType "}" ( "?" )?
                      | "attribute-group" Name
                      )
                      ( "," AttributeList )?

##
# List of an arbitrary amount if namespace identifiers
##
NameSpaceList       ::= "{" Identifier ( "," Identifier )* "}"

##
# Foreign keyword
# 
# Keyword specifying which kind of foreign element/attribute validation is to
# be done
##
Foreign             ::= "strict" | "lax" | "skip"

##
# Definition of a data type
#
# The defined data type can either be a simple type, or a logical or'ed
# expression using the missing keyword, to indicate the type may be
# empty/missing.
# 
# Futhermore the Type can have a default or fixed value to be assigned.
##
BonxaiType          ::= "missing" "|" Type DefaultFixedValue?
                      | Type DefaultFixedValue? "|" "missing"
                      | Type DefaultFixedValue?

##
# Same as above, but without missing.
##
AttrBonxaiType        ::= Type DefaultFixedValue?

##
# Default or fixed value definition
#
# Types can have a fixed or default value assigned
#
##
DefaultFixedValue   ::= "fixed" QuotationName
                      | "default" QuotationName

##
# Short hand identifier
# 
# Short hand identifier to specify namespaces or other short handed names.
##
Identifier          ::= ( NCName \ Keywords )
                      | QuotedIdentifier

##
# Quoted identifier
# 
# Identifier quoted using a starting backslash. These kind of identifiers may
# be used, if an identifier is supposed to have the same name than one of the
# used keywords inside of Bonxai.
##
QuotedIdentifier    ::= "\" NCName

##
# QuotationName
#
# A Quotation name is used to define the value of default and fixed which is 
# used in AttrBonxaiType. These values have to appear inside double quotes and
# may not contain any double quote inside.
#
##
QuotationName		::= """ arbitraryLetterExceptQuote """

##
# List of used Bonxai keywords
# 
# This list is used to define which names and identifiers have to be quoted.
##
Keywords            ::= "empty" | "missing" | "fixed" | "default" | "mixed" | "strict" | "lax" | "skip" | "*"

##
# Name of elements and attributes
# 
# Name used for xml elements and attributes
##
Name                ::= ( (Letter | "_" | ":") (NameChar)* ) \ keywords
                      | QuotedName

##
# Quoted name
# 
# Element or attribute name used to define names which are already used as
# keywords in Bonxai
##
QuotedName          ::= "\" (Letter | "_" | ":") (NameChar)*

##
# Non colon name
# 
# A normal xml name without the colon character (:)
##
NCName              ::= NCNameStartChar NCNameChar*                /* An XML Name, minus the ":" */

##
# Non colon character
# 
# A xml name character without the colon
##
NCNameChar          ::= NameChar \ ":"

##
# Non colon starting character
# 
# The starting character of non colon name
##
NCNameStartChar     ::= Letter | "_"


##
# Character of an XML name
##
NameChar            ::= Letter | Digit | "." | "-" | "_" | ":" | CombiningChar | Extender

##
# Valid number definition
# 
# Used for example for regex repeation.
##
Number              ::= Digit+

##
# The name of an simpleType in XMLSchema
##
Type                ::= /* see: XMLSchema */

##
# Syntactical correct definition of an Namespace URI literal according to
# XMLSchema
##
NamespaceUriLiteral ::=    /* see: XMLSchema */


#################################################
# The following definitions are taken directly form the according w3c
# specification which can be found at: http://www.w3.org/TR/REC-xml/#NT-Letter
#################################################

Letter              ::= /* http://www.w3.org/TR/REC-xml/#NT-Letter */
CombiningChar       ::= /* http://www.w3.org/TR/REC-xml/#NT-Letter */
Extender            ::= /* http://www.w3.org/TR/REC-xml/#NT-Letter */
Digit               ::= /* http://www.w3.org/TR/REC-xml/#NT-Letter */
URL                 ::= /* RFC 1738 - Uniform Resource Locators (URL) */
