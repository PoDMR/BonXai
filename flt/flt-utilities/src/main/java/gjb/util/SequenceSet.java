package gjb.util;

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java.util.NoSuchElementException;

/**
 * <p>Given a list of objects, SequenceSet exposes a lazy iterator over all sequences
 * of a given size consisting of those objects. </p>
 * 
 * <p> Suppose the <code>SequenceSet</code> is to be constructed from the list
 * <code>["a", "b"]</code>, the sequences of size 3 are generated by the following code:
 * <pre>
 *   List list = new LinkedList();
 *   list.add("a");
 *   list.add("b");
 *   SequenceSet seqSet = new SequenceSet(list);
 *   for (Iterator it = seqSet.iterator(3); it.hasNext(); ) {
 *     List seq = (List) it.next();
 *   }
 * </pre>
 * The following 2^3 lists will consecutively be generated by the lazy iterator:
 * <pre>
 *   ["a", "a", "a"]
 *   ["b", "a", "a"]
 *   ["a", "b", "a"]
 *   ...
 *   ["a", "b", "b"]
 *   ["b", "b", "b"]
 * </pre></p>
 * 
 * @author gjb
 * @version 1.0
 */
public class SequenceSet<T> {

	protected ArrayList<T> objects;

	public SequenceSet(List<T> objectList) {
		objects = new ArrayList<T>(objectList);
	}

	/**
	 * 
	 * @param size length of the desired sequences
	 * @return lazy iterator over all sequences of length <code>size</code> over
	 * the objects in the <code>SequenceSet</code>
	 */
	public Iterator iterator(int size) {
		return new Iterator(objects, size);
	}

	protected class Iterator implements java.util.Iterator<List<T>> {

		protected ArrayList<T> objects;
		protected int[] iteration;
		protected double max;
		protected long counter;

		public Iterator(ArrayList<T> obj, int size) {
			this.objects = new ArrayList<T>(obj);
			max = Math.rint(Math.pow(objects.size(), size));
			this.iteration = new int[size];
			reset();
		}

		protected void reset() {
			for (int i = 0; i < iteration.length; i++) {
				iteration[i] = 0;
			}
			counter = 0;
		}

		public long size() {
			return (long) max;
		}

		public boolean hasNext() {
			return counter < max;
		}

		public List<T> next() {
		    if (counter >= max) {
		        throw new NoSuchElementException();
		    }
			List<T> list = new LinkedList<T>();
			for (int j = 0; j < iteration.length; j++) {
				list.add(objects.get(iteration[j]));
			}
			int i = 0;
			int carry = 1;
			while (carry > 0 && i < iteration.length) {
				int newValue = iteration[i] + 1;
				iteration[i] = newValue % objects.size();
				carry = newValue/objects.size();
				i++;
			}
			counter++;
			return list;
		}

		public void remove() {}

	}

}
