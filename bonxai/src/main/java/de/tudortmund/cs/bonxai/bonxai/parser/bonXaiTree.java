/* Generated By:JJTree&JavaCC: Do not edit this line. bonXaiTree.java */
package de.tudortmund.cs.bonxai.bonxai.parser;

import java.util.*;

public class bonXaiTree/*@bgen(jjtree)*/implements bonXaiTreeTreeConstants, bonXaiTreeConstants {/*@bgen(jjtree)*/
  protected JJTbonXaiTreeState jjtree = new JJTbonXaiTreeState();

// Start symbol bonXai(); called by parser function
// Main entry point of the Bonxai grammar
//
// Bonxai              ::= Decl* GroupBlock? Block ConstraintBlock?
  final public SimpleNode bonXai() throws ParseException {
    trace_call("bonXai");
    try {
                               /*@bgen(jjtree) bonXai */
  ASTbonXai jjtn000 = new ASTbonXai(JJTBONXAI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DEFAULT_NAMESPACE:
          case NAMESPACE:
          case DATATYPES:
          case IMPORT:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Decl();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUPS:
          GroupBlock();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        Block();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRAINTS:
          ConstraintBlock();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(0);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
        jjtn000.setNodeType("bonXai");
        {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bonXai");
    }
  }

// Decl                ::= "namespace" Identifier "=" NamespaceUriLiteral
//                      | "default" "namespace" NamespaceUriLiteral
//                      | "datatypes" Identifier "=" URL
//                      | "import" NamespaceUriLiteral ( "=" URL )?
  final public void Decl() throws ParseException {
    trace_call("Decl");
    try {
                    /*@bgen(jjtree) Decl */
                    ASTDecl jjtn000 = new ASTDecl(JJTDECL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);String uri="" ; String ident=""; String url="";
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESPACE:
          jj_consume_token(NAMESPACE);
          ident = Identifier();
          jj_consume_token(EQUALS);
          uri = NamespaceUriLiteral();
                                                                     jjtn000.setNodeChoice("namespace");
          break;
        case DEFAULT_NAMESPACE:
          jj_consume_token(DEFAULT_NAMESPACE);
          uri = NamespaceUriLiteral();
                                                  jjtn000.setNodeChoice("default");
          break;
        case DATATYPES:
          jj_consume_token(DATATYPES);
          ident = Identifier();
          jj_consume_token(EQUALS);
          url = NamespaceUriLiteral();
                                                                      jjtn000.setNodeChoice("datatypes");
          break;
        case IMPORT:
          jj_consume_token(IMPORT);
          uri = NamespaceUriLiteral();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
            jj_consume_token(EQUALS);
            url = NamespaceUriLiteral();
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
                                                                              jjtn000.setNodeChoice("import");
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
                jjtn000.setUri(uri);
                jjtn000.setIdentifier(ident);
                jjtn000.setUrl(url);
                jjtn000.setNodeType("declaration");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Decl");
    }
  }

  final public String NamespaceUriLiteral() throws ParseException {
    trace_call("NamespaceUriLiteral");
    try {
                               Token t; String r; String s = "";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTTP:
        t = jj_consume_token(HTTP);
        break;
      case FTP:
        t = jj_consume_token(FTP);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                         s = t.image;
      r = host();
                                                   s = s + r;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI_WS:
        t = jj_consume_token(URI_WS);
        break;
      case URI_ROW:
        t = jj_consume_token(URI_ROW);
        break;
      case URI_LINE:
        t = jj_consume_token(URI_LINE);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                       s = s + t.image;
  {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NamespaceUriLiteral");
    }
  }

  final public String host() throws ParseException {
    trace_call("host");
    try {
                Token t; String s = "";
      t = jj_consume_token(URI_LABEL);
               s=t.image;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case URI_LABEL:
        case URI_POINT:
        case URI_SLASH:
        case URI_CONSTANT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case URI_POINT:
          case URI_SLASH:
          case URI_CONSTANT:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case URI_POINT:
            t = jj_consume_token(URI_POINT);
            break;
          case URI_SLASH:
            t = jj_consume_token(URI_SLASH);
            break;
          case URI_CONSTANT:
            t = jj_consume_token(URI_CONSTANT);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                             s = s + t.image;
        }
        t = jj_consume_token(URI_LABEL);
                                                                                                                 s = s + t.image;
      }
 {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("host");
    }
  }

// ConstraintBlock     ::= "constraints" "{" Constraint+ "}"
// // is empty constraints possible? ::= "constraints" "{" (Constraint+)? "}"
  final public void ConstraintBlock() throws ParseException {
    trace_call("ConstraintBlock");
    try {
                                           /*@bgen(jjtree) ConstraintBlock */
  ASTConstraintBlock jjtn000 = new ASTConstraintBlock(JJTCONSTRAINTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CONSTRAINTS);
        jj_consume_token(OPENING_CURLY_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNIQUE:
        case KEY:
        case KEYREF:
          label_4:
          while (true) {
            Constraint();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case UNIQUE:
            case KEY:
            case KEYREF:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_4;
            }
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(CLOSING_CURLY_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNodeType("ConstraintBlock");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("ConstraintBlock");
    }
  }

//Constraint          ::= UniqueConstraint | KeyConstraint | KeyRefConstraint
  final public void Constraint() throws ParseException {
    trace_call("Constraint");
    try {
                                 /*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNIQUE:
          UniqueConstraint();
          break;
        case KEY:
          KeyConstraint();
          break;
        case KEYREF:
          KeyRefConstraint();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNodeType("Constraint");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Constraint");
    }
  }

//UniqueConstraint    ::= "unique" APattern "=" "{" ConstraintSelector ConstraintFields "}"
// EQUALS added ; see constraint example
  final public void UniqueConstraint() throws ParseException {
    trace_call("UniqueConstraint");
    try {
                                            /*@bgen(jjtree) UniqueConstraint */
                                            ASTUniqueConstraint jjtn000 = new ASTUniqueConstraint(JJTUNIQUECONSTRAINT);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);String selector; HashSet<String> fields;
      try {
        jj_consume_token(UNIQUE);
        APattern();
        jj_consume_token(EQUALS);
        jj_consume_token(OPENING_CURLY_BRACKET);
        selector = ConstraintSelector();
        fields = ConstraintFields();
        jj_consume_token(CLOSING_CURLY_BRACKET);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
            jjtn000.setNodeType("UniqueConstraint");
                jjtn000.setSelector(selector);
                jjtn000.setFields(fields);
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("UniqueConstraint");
    }
  }

// KeyConstraint       ::= "key" Name APattern "{" ConstraintSelector ConstraintFields "}"
  final public void KeyConstraint() throws ParseException {
    trace_call("KeyConstraint");
    try {
                                       /*@bgen(jjtree) KeyConstraint */
                                       ASTKeyConstraint jjtn000 = new ASTKeyConstraint(JJTKEYCONSTRAINT);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);String name; String selector; HashSet<String> fields;
      try {
        jj_consume_token(KEY);
        name = Name();
        APattern();
        jj_consume_token(EQUALS);
        jj_consume_token(OPENING_CURLY_BRACKET);
        selector = ConstraintSelector();
        fields = ConstraintFields();
        jj_consume_token(CLOSING_CURLY_BRACKET);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
            jjtn000.setName(name);
            jjtn000.setNodeType("KeyConstraint");
                jjtn000.setSelector(selector);
                jjtn000.setFields(fields);
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("KeyConstraint");
    }
  }

// KeyRefConstraint    ::= "keyref" Name APattern "{" ConstraintSelector ConstraintFields "}"
  final public void KeyRefConstraint() throws ParseException {
    trace_call("KeyRefConstraint");
    try {
                                             /*@bgen(jjtree) KeyRefConstraint */
                                             ASTKeyRefConstraint jjtn000 = new ASTKeyRefConstraint(JJTKEYREFCONSTRAINT);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);String name; String selector; HashSet<String> fields;
      try {
        jj_consume_token(KEYREF);
        name = Name();
        APattern();
        jj_consume_token(EQUALS);
        jj_consume_token(OPENING_CURLY_BRACKET);
        selector = ConstraintSelector();
        fields = ConstraintFields();
        jj_consume_token(CLOSING_CURLY_BRACKET);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
            jjtn000.setName(name);
            jjtn000.setNodeType("KeyConstraint");
                jjtn000.setSelector(selector);
                jjtn000.setFields(fields);
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("KeyRefConstraint");
    }
  }

// ConstraintSelector  ::= XPath
  final public String ConstraintSelector() throws ParseException {
    trace_call("ConstraintSelector");
    try {
                                                   /*@bgen(jjtree) ConstraintSelector */
                                                   ASTConstraintSelector jjtn000 = new ASTConstraintSelector(JJTCONSTRAINTSELECTOR);
                                                   boolean jjtc000 = true;
                                                   jjtree.openNodeScope(jjtn000);String s="";
      try {
        jj_consume_token(POINT);
        s = XPath();
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return s;}
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ConstraintSelector");
    }
  }

// ConstraintFields    ::= "{" XPath ( "," XPath )* "}"
// Dummy return value!
  final public HashSet<String> ConstraintFields() throws ParseException {
    trace_call("ConstraintFields");
    try {
                                                        /*@bgen(jjtree) ConstraintFields */
                                                        ASTConstraintFields jjtn000 = new ASTConstraintFields(JJTCONSTRAINTFIELDS);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);HashSet<String> xPathFields = new HashSet<String>(); String xPathField;
      try {
        jj_consume_token(OPENING_CURLY_BRACKET);
        jj_consume_token(AT);
        xPathField = XPath();
                                                     xPathFields.add(xPathField);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          xPathField = XPath();
                                                                                                                     xPathFields.add(xPathField);
        }
        jj_consume_token(CLOSING_CURLY_BRACKET);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return xPathFields;}
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ConstraintFields");
    }
  }

// GroupBlock          ::= "groups" "{" GroupRule+ "}"
  final public void GroupBlock() throws ParseException {
    trace_call("GroupBlock");
    try {
                                  /*@bgen(jjtree) GroupBlock */
  ASTGroupBlock jjtn000 = new ASTGroupBlock(JJTGROUPBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GROUPS);
        jj_consume_token(OPENING_CURLY_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUP:
        case ATTRIBUTEGROUP:
          label_6:
          while (true) {
            GroupRule();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case GROUP:
            case ATTRIBUTEGROUP:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_6;
            }
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(CLOSING_CURLY_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNodeType("GroupBlock");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("GroupBlock");
    }
  }

// GroupRule           ::= "group" Name "=" Regex
//                      | "attribute-group" Name "=" "{" AttributePattern "}"
  final public void GroupRule() throws ParseException {
    trace_call("GroupRule");
    try {
                               /*@bgen(jjtree) GroupRule */
                               ASTGroupRule jjtn000 = new ASTGroupRule(JJTGROUPRULE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);String name;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUP:
          jj_consume_token(GROUP);
          name = Name();
          jj_consume_token(EQUALS);
          Regex();
                                       jjtn000.setNodeChoice("group");
          break;
        case ATTRIBUTEGROUP:
          jj_consume_token(ATTRIBUTEGROUP);
          name = Name();
          jj_consume_token(EQUALS);
          jj_consume_token(OPENING_CURLY_BRACKET);
          AttributePattern();
          jj_consume_token(CLOSING_CURLY_BRACKET);
                                                                                                             jjtn000.setNodeChoice("attributegroup");
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(name);
                jjtn000.setNodeType("GroupRule");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("GroupRule");
    }
  }

//Block               ::= "grammar" "{" Expr+ "}"
// is an empty grammar possible? ::= "grammar" "{" (Expr+)? "}"
  final public void Block() throws ParseException {
    trace_call("Block");
    try {
                       /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(GRAMMAR);
        jj_consume_token(OPENING_CURLY_BRACKET);
        RootElements();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_ROUND_BRACKET:
        case AT:
        case SLASH:
        case DOUBLESLASH:
        case VAR_LABEL:
        case VAR_OPENING_ROUND_BRACKET:
        case VAR_AT:
        case VAROR_LABEL:
        case VAROR_AT:
          label_7:
          while (true) {
            Expr();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPENING_ROUND_BRACKET:
            case AT:
            case SLASH:
            case DOUBLESLASH:
            case VAR_LABEL:
            case VAR_OPENING_ROUND_BRACKET:
            case VAR_AT:
            case VAROR_LABEL:
            case VAROR_AT:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_7;
            }
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(CLOSING_CURLY_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setNodeType("Block");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Block");
    }
  }

// RootElements
  final public void RootElements() throws ParseException {
    trace_call("RootElements");
    try {
                                    /*@bgen(jjtree) RootElements */
                                    ASTRootElements jjtn000 = new ASTRootElements(JJTROOTELEMENTS);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);String name="";
      try {
        jj_consume_token(ROOTS);
        jj_consume_token(VAR_OPENING_CURLY_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_LABEL:
        case VAROR_LABEL:
          name = Name();
                                                            jjtn000.addRoot(name);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAROR_COMMA:
              ;
              break;
            default:
              jj_la1[19] = jj_gen;
              break label_8;
            }
            jj_consume_token(VAROR_COMMA);
            name = Name();
                                                                                                                   jjtn000.addRoot(name);
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(VAR_CLOSING_CURLY_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setNodeType("RootElements");
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("RootElements");
    }
  }

// Expr                ::= Annotations? APattern "=" "mixed"? CPattern
  final public void Expr() throws ParseException {
    trace_call("Expr");
    try {
                    /*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          Annotations();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        APattern();
        jj_consume_token(EQUALS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MIXED:
          jj_consume_token(MIXED);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        CPattern();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setNodeType("Expr");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Expr");
    }
  }

// Annotations         ::= ( Annotation )+
  final public void Annotations() throws ParseException {
    trace_call("Annotations");
    try {
                                   /*@bgen(jjtree) Annotations */
  ASTAnnotations jjtn000 = new ASTAnnotations(JJTANNOTATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_9:
        while (true) {
          Annotation();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_9;
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setNodeType("Annotations");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Annotations");
    }
  }

// old: Annotation            ::= AnnotationName AnnotationValue
// new: Annotation            ::= "@" AnnotationName? (" " AnnotationValue)?
  final public void Annotation() throws ParseException {
    trace_call("Annotation");
    try {
                                 /*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(AT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASECHAR:
          AnnotationName();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASECHAR:
          AnnotationValue();
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setNodeType("Annotation");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Annotation");
    }
  }

// AnnotationName      ::= "@" ["a"-"z", "A"-"Z"]+
  final public void AnnotationName() throws ParseException {
    trace_call("AnnotationName");
    try {
                                         /*@bgen(jjtree) AnnotationName */
                                         ASTAnnotationName jjtn000 = new ASTAnnotationName(JJTANNOTATIONNAME);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t; String name="";
      try {
        label_10:
        while (true) {
          t = jj_consume_token(BASECHAR);
               name=name + t.image;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BASECHAR:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_10;
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setName(name);
        jjtn000.setNodeType("AnnotationName");
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("AnnotationName");
    }
  }

  final public void AnnotationValue() throws ParseException {
    trace_call("AnnotationValue");
    try {
                                           /*@bgen(jjtree) AnnotationValue */
                                           ASTAnnotationValue jjtn000 = new ASTAnnotationValue(JJTANNOTATIONVALUE);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t; String name="";
      try {
        label_11:
        while (true) {
          t = jj_consume_token(BASECHAR);
                name=name + t.image;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BASECHAR:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_11;
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setName(name);
        jjtn000.setNodeType("AnnotationName");
      } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    } finally {
      trace_return("AnnotationValue");
    }
  }

// AnnotationValue     ::= ~["\r", "\n"]+
// the tilde character (~) means NOT to the JavaCC tokenizer.
// not nessecary


// old:APattern            ::= SimpleAPattern FullAPattern? | FullAPattern
// new: APattern            ::= SimpleAPattern | FullAPattern
  final public void APattern() throws ParseException {
    trace_call("APattern");
    try {
                             /*@bgen(jjtree) APattern */
  ASTAPattern jjtn000 = new ASTAPattern(JJTAPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_LABEL:
        case VAR_OPENING_ROUND_BRACKET:
        case VAR_AT:
        case VAROR_LABEL:
        case VAROR_AT:
          SimpleAPattern();
          if (jj_2_1(2)) {
            FullAPattern();
                                                   jjtn000.setNodeChoice("simple_full");
          } else {
            ;
          }
          break;
        case OPENING_ROUND_BRACKET:
        case SLASH:
        case DOUBLESLASH:
          FullAPattern();
                                                                                                                 jjtn000.setNodeChoice("full");
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.setNodeType("APattern");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("APattern");
    }
  }

//old:SimpleAPattern       ::= Name | "(" SimpleAPatternOr ")"
// new: SimpleAPattern       ::= Name | "@"Name | "(" SimpleAPatternOr ")"
  final public void SimpleAPattern() throws ParseException {
    trace_call("SimpleAPattern");
    try {
                                         /*@bgen(jjtree) SimpleAPattern */
                                         ASTSimpleAPattern jjtn000 = new ASTSimpleAPattern(JJTSIMPLEAPATTERN);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);String name="";
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_LABEL:
        case VAROR_LABEL:
          name = Name();
               jjtn000.setName(name);
          break;
        case VAR_AT:
        case VAROR_AT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR_AT:
            jj_consume_token(VAR_AT);
            break;
          case VAROR_AT:
            jj_consume_token(VAROR_AT);
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          name = Name();
                                                                                 jjtn000.setName(name); jjtn000.setAttribute(true);
          break;
        case VAR_OPENING_ROUND_BRACKET:
          jj_consume_token(VAR_OPENING_ROUND_BRACKET);
          SimpleAPatternOr();
          jj_consume_token(VAR_CLOSING_ROUND_BRACKET);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.setNodeType("SimpleAPattern");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("SimpleAPattern");
    }
  }

// old: SimpleAPatternOr     ::= SimpleAPattern ("|" SimpleAPattern)*
// new: SimpleAPatternOr     ::= SimpleAPattern ("|" SimpleAPattern)*
  final public void SimpleAPatternOr() throws ParseException {
    trace_call("SimpleAPatternOr");
    try {
                                             /*@bgen(jjtree) SimpleAPatternOr */
  ASTSimpleAPatternOr jjtn000 = new ASTSimpleAPatternOr(JJTSIMPLEAPATTERNOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        SimpleAPattern();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAROR_OR:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_12;
          }
          jj_consume_token(VAROR_OR);
          SimpleAPattern();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.setNodeType("SimpleAPatternOr");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("SimpleAPatternOr");
    }
  }

// old: FullAPattern       ::=    PathSeparator SimpleAPattern (FullAPattern)? | "(" FullAPatternOr ")" Operator?
// new: FullAPattern       ::=    PathSeparator SimpleAPattern | "(" FullAPatternOr ")" Operator? | FullAPattern FullAPattern
// without left recursion  ::=    PathSeparator SimpleAPattern | "(" FullAPatternOr ")" Operator? (FullAPattern)?
// correct without left recursion ::=   ( PathSeparator SimpleAPattern | "(" FullAPatternOr ")" Operator? ) (FullAPattern)?
  final public void FullAPattern() throws ParseException {
    trace_call("FullAPattern");
    try {
                                    /*@bgen(jjtree) FullAPattern */
                                    ASTFullAPattern jjtn000 = new ASTFullAPattern(JJTFULLAPATTERN);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Boolean separator=false; Boolean sequence=false; String operator="";
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
        case DOUBLESLASH:
          separator = PathSeparator();
          SimpleAPattern();
                                                     jjtn000.setNodeChoice("separator");
          break;
        case OPENING_ROUND_BRACKET:
          jj_consume_token(OPENING_ROUND_BRACKET);
          FullAPatternOr();
          jj_consume_token(CLOSING_ROUND_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STAR:
          case PLUS:
          case QUESTION_MARK:
            operator = Operator();
                                                                                           jjtn000.setOperator(operator);
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
                                                                                                                                 jjtn000.setNodeChoice("Or");
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_ROUND_BRACKET:
        case SLASH:
        case DOUBLESLASH:
          FullAPattern();
                  sequence=true;
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setSequence(sequence);
      jjtn000.setSeparator(separator);
          jjtn000.setNodeType("FullAPattern");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("FullAPattern");
    }
  }

//FullAPatternHead   ::= 	PathSeparator Name 
// deleted production


// old: FullAPatternOr     ::= FullAPattern ("|" FullAPattern)*
// new: FullAPatternOr     ::= FullAPattern ("|" FullAPattern)*
  final public void FullAPatternOr() throws ParseException {
    trace_call("FullAPatternOr");
    try {
                                        /*@bgen(jjtree) FullAPatternOr */
  ASTFullAPatternOr jjtn000 = new ASTFullAPatternOr(JJTFULLAPATTERNOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        FullAPattern();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_13;
          }
          jj_consume_token(OR);
          FullAPattern();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.setNodeType("FullAPatternOr");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("FullAPatternOr");
    }
  }

// PathSeparator      ::= "/" | "//"
  final public Boolean PathSeparator() throws ParseException {
    trace_call("PathSeparator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
          {if (true) return false;}
        break;
      case DOUBLESLASH:
        jj_consume_token(DOUBLESLASH);
                                          {if (true) return true;}
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PathSeparator");
    }
  }

// Operator           ::= "*" | "+" | "?"
  final public String Operator() throws ParseException {
    trace_call("Operator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
          {if (true) return "*";}
        break;
      case PLUS:
        jj_consume_token(PLUS);
                                 {if (true) return "+";}
        break;
      case QUESTION_MARK:
        jj_consume_token(QUESTION_MARK);
                                                                 {if (true) return "?";}
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Operator");
    }
  }

// CPattern            ::= "{" ( AttributePattern "," )? ElementPattern "}"
  final public void CPattern() throws ParseException {
    trace_call("CPattern");
    try {
                            /*@bgen(jjtree) CPattern */
  ASTCPattern jjtn000 = new ASTCPattern(JJTCPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPENING_CURLY_BRACKET);
        if (jj_2_2(2)) {
          AttributePattern();
          jj_consume_token(COMMA);
        } else {
          ;
        }
        ElementPattern();
        jj_consume_token(CLOSING_CURLY_BRACKET);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.setNodeType("CPattern");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("CPattern");
    }
  }

// ElementPattern      ::= "empty"
//                      | "missing"? MixedRegex
  final public void ElementPattern() throws ParseException {
    trace_call("ElementPattern");
    try {
                                        /*@bgen(jjtree) ElementPattern */
                                        ASTElementPattern jjtn000 = new ASTElementPattern(JJTELEMENTPATTERN);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Boolean empty=false; Boolean missing=false;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EMPTY:
          jj_consume_token(EMPTY);
           empty=true;
          break;
        case OPENING_ROUND_BRACKET:
        case TYPE:
        case GROUP:
        case MISSING:
        case ELEMENT:
        case STRICT:
        case LAX:
        case SKIPP:
          if (jj_2_3(2)) {
            jj_consume_token(MISSING);
                                                    missing=true;
          } else {
            ;
          }
          MixedRegex();
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      jjtn000.setEmpty(empty);
        jjtn000.setMissing(missing);
        jjtn000.setNodeType("ElementPattern");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("ElementPattern");
    }
  }

// MixedRegex          ::= All
//                      | Regex
//                      | BonxaiType
  final public void MixedRegex() throws ParseException {
    trace_call("MixedRegex");
    try {
                                 /*@bgen(jjtree) MixedRegex */
  ASTMixedRegex jjtn000 = new ASTMixedRegex(JJTMIXEDREGEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_4(2147483647)) {
          All();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPENING_ROUND_BRACKET:
          case GROUP:
          case ELEMENT:
          case STRICT:
          case LAX:
          case SKIPP:
            Regex();
            break;
          case TYPE:
          case MISSING:
            BonxaiType();
            break;
          default:
            jj_la1[39] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
                jjtn000.setNodeType("MixedRegex");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("MixedRegex");
    }
  }

//All                 ::= NamedType "?"? ( "&" NamedType "?"? )+
  final public void All() throws ParseException {
    trace_call("All");
    try {
                   /*@bgen(jjtree) All */
  ASTAll jjtn000 = new ASTAll(JJTALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        NamedType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION_MARK:
          jj_consume_token(QUESTION_MARK);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        label_14:
        while (true) {
          jj_consume_token(ANDLITERAL);
          NamedType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QUESTION_MARK:
            jj_consume_token(QUESTION_MARK);
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ANDLITERAL:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_14;
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNodeType("All");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("All");
    }
  }

//Grammar rule:
//# Regex               ::= Regex ( "*" | "+" | "?" | "[" Number ( "," Number )? "]" )?
//#                       | Regex "," Regex
//#                       | Regex "|" Regex
//#                       | "(" Regex ")"
//#                       | NamedType
//# Rule below should avoid left recursion.
//# Warning: The rule is of the form X ::= A (Y_1 | Y_2) | B (Z_1 | Z_2). It contains a nested "or". 
//##
//
//Regex   :: =   "(" Regex ")" ( "*" | "+" | "?" | "[" Number ( "," (NumberOrUnbounded) )? "]" )? 
//                       ( ("," Regex)? | ("|" Regex)? )
//             | NamedType ( "*" | "+" | "?" | "[" Number ( "," NumberOrUnbounded) )? "]" )? 
//                       ( ("," Regex)? | ("|" Regex)? )
  final public void Regex() throws ParseException {
    trace_call("Regex");
    try {
                       /*@bgen(jjtree) Regex */
                       ASTRegex jjtn000 = new ASTRegex(JJTREGEX);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Integer numberBefore=0; Integer numberAfter=0; Token t=null; Token u=null; String operator=""; String secondoperator="";
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_ROUND_BRACKET:
          jj_consume_token(OPENING_ROUND_BRACKET);
          Regex();
                                    jjtn000.setNodeChoice("regex");
          jj_consume_token(CLOSING_ROUND_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPENING_SQUARED_BRACKET:
          case STAR:
          case PLUS:
          case QUESTION_MARK:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STAR:
              t = jj_consume_token(STAR);
              break;
            case PLUS:
              t = jj_consume_token(PLUS);
              break;
            case QUESTION_MARK:
              t = jj_consume_token(QUESTION_MARK);
              break;
            case OPENING_SQUARED_BRACKET:
              jj_consume_token(OPENING_SQUARED_BRACKET);
              numberBefore = Number();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case CONSTANT:
                  numberAfter = Number();
                  break;
                case STAR:
                  u = jj_consume_token(STAR);
                  break;
                default:
                  jj_la1[43] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[44] = jj_gen;
                ;
              }
              jj_consume_token(CLOSING_SQUARED_BRACKET);
              break;
            default:
              jj_la1[45] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[46] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case OR:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              Regex();
                         jjtn000.setConcatenation(true);
              break;
            case OR:
              jj_consume_token(OR);
              Regex();
                            jjtn000.setDisjunction(true);
              break;
            default:
              jj_la1[47] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[48] = jj_gen;
            ;
          }
          break;
        case GROUP:
        case ELEMENT:
        case STRICT:
        case LAX:
        case SKIPP:
          NamedType();
                jjtn000.setNodeChoice("namedtype");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPENING_SQUARED_BRACKET:
          case STAR:
          case PLUS:
          case QUESTION_MARK:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STAR:
              t = jj_consume_token(STAR);
              break;
            case PLUS:
              t = jj_consume_token(PLUS);
              break;
            case QUESTION_MARK:
              t = jj_consume_token(QUESTION_MARK);
              break;
            case OPENING_SQUARED_BRACKET:
              jj_consume_token(OPENING_SQUARED_BRACKET);
              numberBefore = Number();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case CONSTANT:
                  numberAfter = Number();
                  break;
                case STAR:
                  u = jj_consume_token(STAR);
                  break;
                default:
                  jj_la1[49] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[50] = jj_gen;
                ;
              }
              jj_consume_token(CLOSING_SQUARED_BRACKET);
              break;
            default:
              jj_la1[51] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[52] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case OR:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              Regex();
                         jjtn000.setConcatenation(true);
              break;
            case OR:
              jj_consume_token(OR);
              Regex();
                           jjtn000.setDisjunction(true);
              break;
            default:
              jj_la1[53] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[54] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                  operator=(t==null)?"":t.image;
                  secondoperator=(u==null)?"":u.image;

                jjtn000.setOperator(operator);
                jjtn000.setSecondOperator(secondoperator);

                jjtn000.setNumberBefore(numberBefore);
                jjtn000.setNumberAfter(numberAfter);
                jjtn000.setNodeType("Regex");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("Regex");
    }
  }

//NamedType           ::= "element" Name ( "{" BonxaiType "}" )?
//                      | "group" Name
//                      | Foreign "element" "*" ( "[" Number ( "," Number )? "]" )? NameSpaceList


// List are generated with 4 entries !
  final public void NamedType() throws ParseException {
    trace_call("NamedType");
    try {
                               /*@bgen(jjtree) NamedType */
                               ASTNamedType jjtn000 = new ASTNamedType(JJTNAMEDTYPE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Vector lst = new Vector();String name=""; String foreign=""; Integer numberBefore=0; Integer numberAfter=0;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELEMENT:
          jj_consume_token(ELEMENT);
          name = Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPENING_CURLY_BRACKET:
            jj_consume_token(OPENING_CURLY_BRACKET);
            BonxaiType();
            jj_consume_token(CLOSING_CURLY_BRACKET);
            break;
          default:
            jj_la1[56] = jj_gen;
            ;
          }
                                                                                            jjtn000.setNodeChoice("element");
          break;
        case GROUP:
          jj_consume_token(GROUP);
          name = Name();
                         jjtn000.setNodeChoice("group");
          break;
        case STRICT:
        case LAX:
        case SKIPP:
          foreign = Foreign();
          jj_consume_token(ELEMENT_STAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPENING_SQUARED_BRACKET:
            jj_consume_token(OPENING_SQUARED_BRACKET);
            numberBefore = Number();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              numberAfter = Number();
              break;
            default:
              jj_la1[57] = jj_gen;
              ;
            }
            jj_consume_token(CLOSING_SQUARED_BRACKET);
            break;
          default:
            jj_la1[58] = jj_gen;
            ;
          }
          lst = NameSpaceList();
                                                                                                                                                                          jjtn000.setNodeChoice("foreign");
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
                jjtn000.setName(name);
                jjtn000.setForeign(foreign);
                jjtn000.setList(lst);
                jjtn000.setNumberBefore(numberBefore);
                jjtn000.setNumberAfter(numberAfter);
                jjtn000.setNodeType("NamedType");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("NamedType");
    }
  }

//AttributePattern    ::= Foreign "attribute" "*" NameSpaceList ( "," AttributeList )? | AttributeList
  final public void AttributePattern() throws ParseException {
    trace_call("AttributePattern");
    try {
                                             /*@bgen(jjtree) AttributePattern */
                                             ASTAttributePattern jjtn000 = new ASTAttributePattern(JJTATTRIBUTEPATTERN);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);Vector namespaceLst = new Vector(); String foreign="";  Vector attributeLst = new Vector();
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRICT:
        case LAX:
        case SKIPP:
          foreign = Foreign();
          jj_consume_token(ATTRIBUTE);
          jj_consume_token(STAR);
          namespaceLst = NameSpaceList();
          if (jj_2_5(2)) {
            jj_consume_token(COMMA);
            attributeLst = AttributeList();
          } else {
            ;
          }
          break;
        case ATTRIBUTEGROUP:
        case ATTRIBUTE:
          attributeLst = AttributeList();
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNamespaceList(namespaceLst);
                jjtn000.setForeign(foreign);
                jjtn000.setAttributeList(attributeLst);
                jjtn000.setNodeType("AttributePattern");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("AttributePattern");
    }
  }

// [old] AttributeList       ::= ( 
//                        "attribute" Name "{" AttrBonxaiType "}" ( "?" )?
//                      | "attribute-group" Name
//                      )
//                      ( "," AttributeList )?

// [new] AttributeList       ::= ( 
//                        "attribute" Name "{" AttrBonxaiType "}" ( "?" )?
//                      | "attribute-group" Name
//                      )
//                      ( "," ( "attribute" Name "{" AttrBonxaiType "}" ( "?" )?
//                      | "attribute-group" Name )
//                      ))*
  final public Vector AttributeList() throws ParseException {
    trace_call("AttributeList");
    try {
                                        /*@bgen(jjtree) AttributeList */
                                        ASTAttributeList jjtn000 = new ASTAttributeList(JJTATTRIBUTELIST);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);String name; Vector lst = new Vector();
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTRIBUTE:
          jj_consume_token(ATTRIBUTE);
          name = Name();
                           lst.add(name);
          jj_consume_token(OPENING_CURLY_BRACKET);
          AttrBonxaiType();
          jj_consume_token(CLOSING_CURLY_BRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QUESTION_MARK:
            jj_consume_token(QUESTION_MARK);
            break;
          default:
            jj_la1[61] = jj_gen;
            ;
          }
          break;
        case ATTRIBUTEGROUP:
          jj_consume_token(ATTRIBUTEGROUP);
          name = Name();
                                lst.add(name);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_15:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_15;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTRIBUTE:
            jj_consume_token(ATTRIBUTE);
            name = Name();
                                                  lst.add(name);
            jj_consume_token(OPENING_CURLY_BRACKET);
            AttrBonxaiType();
            jj_consume_token(CLOSING_CURLY_BRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case QUESTION_MARK:
              jj_consume_token(QUESTION_MARK);
              break;
            default:
              jj_la1[63] = jj_gen;
              ;
            }
            break;
          case ATTRIBUTEGROUP:
            jj_consume_token(ATTRIBUTEGROUP);
            name = Name();
                                lst.add(name);
            break;
          default:
            jj_la1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(name);
                jjtn000.setNodeType("AttributeList");
                jjtn000.setList(lst);
                {if (true) return lst;}
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("AttributeList");
    }
  }

// NameSpaceList       ::= "{" Identifier ( "," Identifier )* "}"
  final public Vector NameSpaceList() throws ParseException {
    trace_call("NameSpaceList");
    try {
                                         /*@bgen(jjtree) NameSpaceList */
                                         ASTNameSpaceList jjtn000 = new ASTNameSpaceList(JJTNAMESPACELIST);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Vector lst = new Vector(); Token t;
      try {
        jj_consume_token(START_LIST);
        t = jj_consume_token(LIST_LABEL);
                               lst.add(t.image);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST_COMMA:
            ;
            break;
          default:
            jj_la1[65] = jj_gen;
            break label_16;
          }
          jj_consume_token(LIST_COMMA);
          t = jj_consume_token(LIST_LABEL);
                                                                                 lst.add(t.image);
        }
        jj_consume_token(END_LIST);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
jjtn000.setNodeType("NameSpaceList");
{if (true) return lst;}
      } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NameSpaceList");
    }
  }

// Foreign             ::= "strict" | "lax" | "skip"
  final public String Foreign() throws ParseException {
    trace_call("Foreign");
    try {
                            /*@bgen(jjtree) Foreign */
  ASTForeign jjtn000 = new ASTForeign(JJTFOREIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRICT:
          jj_consume_token(STRICT);
            {if (true) return "strict";}
          break;
        case LAX:
          jj_consume_token(LAX);
                                       {if (true) return "lax";}
          break;
        case SKIPP:
          jj_consume_token(SKIPP);
                                                                 {if (true) return "skip";}
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 jjtn000.setNodeType("Foreign");
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Foreign");
    }
  }

// BonxaiType          ::= "missing" "|" Type DefaultFixedValue?
//                      | Type DefaultFixedValue? "|" "missing"
//                      | Type DefaultFixedValue?
  final public void BonxaiType() throws ParseException {
    trace_call("BonxaiType");
    try {
                                 /*@bgen(jjtree) BonxaiType */
                                 ASTBonxaiType jjtn000 = new ASTBonxaiType(JJTBONXAITYPE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Boolean missing=false; Boolean fixed=false; Boolean def=false; String type=""; String name="";
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MISSING:
          jj_consume_token(MISSING);
             missing=true;
          jj_consume_token(OR);
          jj_consume_token(TYPE);
          type = Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DEFAULTT:
          case FIXED:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FIXED:
              jj_consume_token(FIXED);
                                                                 fixed=true;
              name = QuotationName();
              break;
            case DEFAULTT:
              jj_consume_token(DEFAULTT);
                                                                                                                 def=true;
              name = QuotationName();
              break;
            default:
              jj_la1[67] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
          break;
        case TYPE:
          jj_consume_token(TYPE);
          type = Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DEFAULTT:
          case FIXED:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FIXED:
              jj_consume_token(FIXED);
                                  fixed=true;
              name = QuotationName();
              break;
            case DEFAULTT:
              jj_consume_token(DEFAULTT);
                                                                                   def=true;
              name = QuotationName();
              break;
            default:
              jj_la1[69] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            jj_consume_token(OR);
            jj_consume_token(MISSING);
                                                                                                                                        missing=true;
            break;
          default:
            jj_la1[71] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
                jjtn000.setName(name);
                jjtn000.setFixed(fixed);
                jjtn000.setDefault(def);
                jjtn000.setType(type);
                jjtn000.setMissing(missing);
                jjtn000.setNodeType("Bonxai Type");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("BonxaiType");
    }
  }

// AttrBonxaiType        ::= Type DefaultFixedValue?
  final public void AttrBonxaiType() throws ParseException {
    trace_call("AttrBonxaiType");
    try {
                                         /*@bgen(jjtree) AttrBonxaiType */
                                         ASTAttrBonxaiType jjtn000 = new ASTAttrBonxaiType(JJTATTRBONXAITYPE);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Boolean fixed=false; Boolean def=false; String type=""; String name="";
      try {
        type = Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFAULTT:
        case FIXED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FIXED:
            jj_consume_token(FIXED);
                        fixed=true;
            name = QuotationName();
            break;
          case DEFAULTT:
            jj_consume_token(DEFAULTT);
                                                                         def=true;
            name = QuotationName();
            break;
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[74] = jj_gen;
          ;
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
                jjtn000.setName(name);
                jjtn000.setFixed(fixed);
                jjtn000.setDefault(def);
                jjtn000.setType(type);
                jjtn000.setNodeType("AttrBonXaiType");
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("AttrBonxaiType");
    }
  }

//DefaultFixedValue   ::= "fixed" QuotationName
//                      | "default" QuotationName
// integrated in rules above




// Identifier          ::= ( NCName \ Keywords )
//                      | QuotedIdentifier
  final public String Identifier() throws ParseException {
    trace_call("Identifier");
    try {
                      Token t; String s="" ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_LABEL:
        t = jj_consume_token(VAR_LABEL);
                 s= s+t.image;
        break;
      case VAROR_LABEL:
        t = jj_consume_token(VAROR_LABEL);
                                                   s= s+t.image;
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Identifier");
    }
  }

// QuotedIdentifier    ::= "\" NCName
// not necessary

// QuotationName		::= """ arbitraryLetterExceptQuote """
  final public String QuotationName() throws ParseException {
    trace_call("QuotationName");
    try {
                         Token t; String s="" ;
      jj_consume_token(QUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOT_LABEL:
        t = jj_consume_token(QUOT_LABEL);
        break;
      case QUOT_CONSTANT:
        t = jj_consume_token(QUOT_CONSTANT);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                            s=t.image;
      jj_consume_token(QUOT_QUOTE);
 {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("QuotationName");
    }
  }

// Keywords            ::= "empty" | "missing" | "fixed" | "default" | "mixed" | "strict" | "lax" | "skip" | "*"
// implementation not ncessary


// Name                ::= ( (Letter | "_" | ":") (NameChar)* ) \ keywords  | QuotedName
// added: productions like Name:Name; first Name: Namespace (group.bonxai example!)
  final public String Name() throws ParseException {
    trace_call("Name");
    try {
                String s="" ; String t="";
      s = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case VAROR_COLON:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          break;
        case VAROR_COLON:
          jj_consume_token(VAROR_COLON);
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = Identifier();
                                                          t=":" + t;
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
  {if (true) return s+t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Name");
    }
  }

// Number              ::= Digit+
  final public Integer Number() throws ParseException {
    trace_call("Number");
    try {
                     Token value;
      value = jj_consume_token(CONSTANT);
 {if (true) return Integer.valueOf(value.image).intValue();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Number");
    }
  }

  final public String NCName() throws ParseException {
    trace_call("NCName");
    try {
{if (true) return "foo";}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NCName");
    }
  }

// QuotedName          ::= "\" (Letter | "_" | ":") (NameChar)*
// NCName              ::= NCNameStartChar NCNameChar*                
// NCNameChar          ::= NameChar \ ":"
// NCNameStartChar     ::= Letter | "_"
// NameChar            ::= Letter | Digit | "." | "-" | "_" | ":" | CombiningChar | Extender
// not necessary


// http://www.w3.org/TR/REC-xml/#NT-Letter

// [84]   	Letter	   ::=   	 BaseChar | Ideographic

//[85]   BaseChar	


// [86]  Ideographic

// [87]   CombiningChar

// [88]   Digit

// [89]  Extender


// --------------------------------------
// XPath:

// http://www.w3.org/TR/xpath20/#nt-bnf
// [1]    	XPath 	   ::=    	Expr
  final public String XPath() throws ParseException {
    trace_call("XPath");
    try {
      Expr_XPath();
 {if (true) return "Foo";}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("XPath");
    }
  }

// [2]    	Expr 	   ::=    	ExprSingle ("," ExprSingle)*
  final public void Expr_XPath() throws ParseException {
    trace_call("Expr_XPath");
    try {
      ExprSingle();
      label_17:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(COMMA);
        ExprSingle();
      }
    } finally {
      trace_return("Expr_XPath");
    }
  }

// [3]    	ExprSingle 	   ::=    	ForExpr | QuantifiedExpr | IfExpr | OrExpr
  final public void ExprSingle() throws ParseException {
    trace_call("ExprSingle");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        ForExpr();
        break;
      case SOME:
      case EVERY:
        QuantifiedExpr();
        break;
      case IF:
        IfExpr();
        break;
      default:
        jj_la1[79] = jj_gen;
        OrExpr();
      }
    } finally {
      trace_return("ExprSingle");
    }
  }

// [4]    	ForExpr 	   ::=    	SimpleForClause "return" ExprSingle
  final public void ForExpr() throws ParseException {
    trace_call("ForExpr");
    try {
      SimpleForClause();
      jj_consume_token(RETURN);
      ExprSingle();
    } finally {
      trace_return("ForExpr");
    }
  }

// [5]    	SimpleForClause 	   ::=    	"for" "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)*
  final public void SimpleForClause() throws ParseException {
    trace_call("SimpleForClause");
    try {
      jj_consume_token(FOR);
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(IN);
      ExprSingle();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(IN);
        ExprSingle();
      }
    } finally {
      trace_return("SimpleForClause");
    }
  }

// [6]    	QuantifiedExpr 	   ::=    	("some" | "every") "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)* "satisfies" ExprSingle
  final public void QuantifiedExpr() throws ParseException {
    trace_call("QuantifiedExpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOME:
        jj_consume_token(SOME);
        break;
      case EVERY:
        jj_consume_token(EVERY);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(IN);
      ExprSingle();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(IN);
        ExprSingle();
      }
      jj_consume_token(SATISFIES);
      ExprSingle();
    } finally {
      trace_return("QuantifiedExpr");
    }
  }

// [7]    	IfExpr 	   ::=    	"if" "(" Expr ")" "then" ExprSingle "else" ExprSingle
  final public void IfExpr() throws ParseException {
    trace_call("IfExpr");
    try {
      jj_consume_token(IF);
      jj_consume_token(OPENING_ROUND_BRACKET);
      Expr_XPath();
      jj_consume_token(CLOSING_ROUND_BRACKET);
      jj_consume_token(THEN);
      ExprSingle();
      jj_consume_token(ELSE);
      ExprSingle();
    } finally {
      trace_return("IfExpr");
    }
  }

// [8]    	OrExpr 	   ::=    	AndExpr ( "or" AndExpr )*
  final public void OrExpr() throws ParseException {
    trace_call("OrExpr");
    try {
      AndExpr();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_20;
        }
        jj_consume_token(OR);
        AndExpr();
      }
    } finally {
      trace_return("OrExpr");
    }
  }

// [9]    	AndExpr 	   ::=    	ComparisonExpr ( "and" ComparisonExpr )*
  final public void AndExpr() throws ParseException {
    trace_call("AndExpr");
    try {
      ComparisonExpr();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_21;
        }
        jj_consume_token(AND);
        ComparisonExpr();
      }
    } finally {
      trace_return("AndExpr");
    }
  }

// [10]    	ComparisonExpr 	   ::=    	RangeExpr ( (ValueComp | GeneralComp | NodeComp) RangeExpr )?
  final public void ComparisonExpr() throws ParseException {
    trace_call("ComparisonExpr");
    try {
      RangeExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOTEQUAL:
      case LESSTHAN:
      case LESSEQUAL:
      case GREATERTHAN:
      case GREATEREQUAL:
      case EQ:
      case NE:
      case LT:
      case LE:
      case GT:
      case GE:
      case IS:
      case DBLEFT:
      case DBRIGHT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
        case LT:
        case LE:
        case GT:
        case GE:
          ValueComp();
          break;
        case EQUALS:
        case NOTEQUAL:
        case LESSTHAN:
        case LESSEQUAL:
        case GREATERTHAN:
        case GREATEREQUAL:
          GeneralComp();
          break;
        case IS:
        case DBLEFT:
        case DBRIGHT:
          NodeComp();
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RangeExpr();
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
    } finally {
      trace_return("ComparisonExpr");
    }
  }

// [11]    	RangeExpr 	   ::=    	AdditiveExpr ( "to" AdditiveExpr )?
  final public void RangeExpr() throws ParseException {
    trace_call("RangeExpr");
    try {
      AdditiveExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        jj_consume_token(TO);
        AdditiveExpr();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
    } finally {
      trace_return("RangeExpr");
    }
  }

// [12]    	AdditiveExpr 	   ::=    	MultiplicativeExpr ( ("+" | "-") MultiplicativeExpr )*
  final public void AdditiveExpr() throws ParseException {
    trace_call("AdditiveExpr");
    try {
      MultiplicativeExpr();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpr();
      }
    } finally {
      trace_return("AdditiveExpr");
    }
  }

// [13]    	MultiplicativeExpr 	   ::=    	UnionExpr ( ("*" | "div" | "idiv" | "mod") UnionExpr )*
  final public void MultiplicativeExpr() throws ParseException {
    trace_call("MultiplicativeExpr");
    try {
      UnionExpr();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case DIV:
        case IDIV:
        case MOD:
          ;
          break;
        default:
          jj_la1[90] = jj_gen;
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case IDIV:
          jj_consume_token(IDIV);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnionExpr();
      }
    } finally {
      trace_return("MultiplicativeExpr");
    }
  }

// [14]    	UnionExpr 	   ::=    	IntersectExceptExpr ( ("union" | "|") IntersectExceptExpr )*
  final public void UnionExpr() throws ParseException {
    trace_call("UnionExpr");
    try {
      IntersectExceptExpr();
      label_24:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNION:
          jj_consume_token(UNION);
          break;
        case OR:
          jj_consume_token(OR);
          break;
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        IntersectExceptExpr();
      }
    } finally {
      trace_return("UnionExpr");
    }
  }

// [15]    	IntersectExceptExpr 	   ::=    	InstanceofExpr ( ("intersect" | "except") InstanceofExpr )*
  final public void IntersectExceptExpr() throws ParseException {
    trace_call("IntersectExceptExpr");
    try {
      InstanceofExpr();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTERSECT:
        case EXCEPT:
          ;
          break;
        default:
          jj_la1[93] = jj_gen;
          break label_25;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTERSECT:
          jj_consume_token(INTERSECT);
          break;
        case EXCEPT:
          jj_consume_token(EXCEPT);
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceofExpr();
      }
    } finally {
      trace_return("IntersectExceptExpr");
    }
  }

// [16]    	InstanceofExpr 	   ::=    	TreatExpr ( "instance" "of" SequenceType )?
  final public void InstanceofExpr() throws ParseException {
    trace_call("InstanceofExpr");
    try {
      TreatExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCE:
        jj_consume_token(INSTANCE);
        jj_consume_token(OF);
        SequenceType();
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
    } finally {
      trace_return("InstanceofExpr");
    }
  }

// [17]    	TreatExpr 	   ::=    	CastableExpr ( "treat" "as" SequenceType )?
  final public void TreatExpr() throws ParseException {
    trace_call("TreatExpr");
    try {
      CastableExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TREAT:
        jj_consume_token(TREAT);
        jj_consume_token(AS);
        SequenceType();
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
    } finally {
      trace_return("TreatExpr");
    }
  }

// [18]    	CastableExpr 	   ::=    	CastExpr ( "castable" "as" SingleType )?
  final public void CastableExpr() throws ParseException {
    trace_call("CastableExpr");
    try {
      CastExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASTABLE:
        jj_consume_token(CASTABLE);
        jj_consume_token(AS);
        SingleType();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } finally {
      trace_return("CastableExpr");
    }
  }

// [19]    	CastExpr 	   ::=    	UnaryExpr ( "cast" "as" SingleType )?
  final public void CastExpr() throws ParseException {
    trace_call("CastExpr");
    try {
      UnaryExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAST:
        jj_consume_token(CAST);
        jj_consume_token(AS);
        SingleType();
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
    } finally {
      trace_return("CastExpr");
    }
  }

// [20]    	UnaryExpr 	   ::=    	("-" | "+")* ValueExpr
  final public void UnaryExpr() throws ParseException {
    trace_call("UnaryExpr");
    try {
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_26;
        }
        if (jj_2_9(2)) {
          jj_consume_token(MINUS);
        } else if (jj_2_10(2)) {
          jj_consume_token(PLUS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ValueExpr();
    } finally {
      trace_return("UnaryExpr");
    }
  }

// [21]    	ValueExpr 	   ::=    	PathExpr
  final public void ValueExpr() throws ParseException {
    trace_call("ValueExpr");
    try {
      PathExpr();
    } finally {
      trace_return("ValueExpr");
    }
  }

// [22]    	GeneralComp 	   ::=    	"=" | "!=" | "<" | "<=" | ">" | ">="
  final public void GeneralComp() throws ParseException {
    trace_call("GeneralComp");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case LESSEQUAL:
        jj_consume_token(LESSEQUAL);
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
        break;
      case GREATEREQUAL:
        jj_consume_token(GREATEREQUAL);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("GeneralComp");
    }
  }

// [23]    	ValueComp 	   ::=    	"eq" | "ne" | "lt" | "le" | "gt" | "ge"
  final public void ValueComp() throws ParseException {
    trace_call("ValueComp");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      case LT:
        jj_consume_token(LT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ValueComp");
    }
  }

// [24]    	NodeComp 	   ::=    	"is" | "<<" | ">>"
  final public void NodeComp() throws ParseException {
    trace_call("NodeComp");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        break;
      case DBLEFT:
        jj_consume_token(DBLEFT);
        break;
      case DBRIGHT:
        jj_consume_token(DBRIGHT);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NodeComp");
    }
  }

// [25]    	PathExpr 	   ::=    	("/" RelativePathExpr?) | ("//" RelativePathExpr) | RelativePathExpr
  final public void PathExpr() throws ParseException {
    trace_call("PathExpr");
    try {
      if (jj_2_11(3)) {
        jj_consume_token(SLASH);
        RelativePathExpr();
      } else {
        ;
      }
    } finally {
      trace_return("PathExpr");
    }
  }

// [26]    	RelativePathExpr 	   ::=    	StepExpr (("/" | "//") StepExpr)*
  final public void RelativePathExpr() throws ParseException {
    trace_call("RelativePathExpr");
    try {
      StepExpr();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
        case DOUBLESLASH:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_27;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case DOUBLESLASH:
          jj_consume_token(DOUBLESLASH);
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        StepExpr();
      }
    } finally {
      trace_return("RelativePathExpr");
    }
  }

// [27]    	StepExpr 	   ::=    	FilterExpr | AxisStep
  final public void StepExpr() throws ParseException {
    trace_call("StepExpr");
    try {
      if (jj_2_12(2)) {
        FilterExpr();
      } else {
        AxisStep();
      }
    } finally {
      trace_return("StepExpr");
    }
  }

// [28]    	AxisStep 	   ::=    	(ReverseStep | ForwardStep) PredicateList
  final public void AxisStep() throws ParseException {
    trace_call("AxisStep");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DBPOINT:
      case PARENT:
      case ANCESTOR:
      case PRECEDINGSIBLING:
      case PRECEDING:
      case ANCESTORORSELF:
        ReverseStep();
        break;
      default:
        jj_la1[105] = jj_gen;
        ForwardStep();
      }
      PredicateList();
    } finally {
      trace_return("AxisStep");
    }
  }

// [29]    	ForwardStep 	   ::=    	(ForwardAxis NodeTest) | AbbrevForwardStep
  final public void ForwardStep() throws ParseException {
    trace_call("ForwardStep");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMESPACE:
      case ATTRIBUTE:
      case CHILD:
      case DESCENDANT:
      case SELF:
      case DESCENDANTORSELF:
      case FOLLOWINGSIBLING:
      case FOLLOWING:
        ForwardAxis();
        NodeTest();
        break;
      default:
        jj_la1[106] = jj_gen;
        AbbrevForwardStep();
      }
    } finally {
      trace_return("ForwardStep");
    }
  }

// [30]    	ForwardAxis 	   ::=    	("child" "::")| ("descendant" "::")| ("attribute" "::")| ("self" "::") |
//("descendant-or-self" "::")
//| ("following-sibling" "::")
//| ("following" "::")
//| ("namespace" "::")
  final public void ForwardAxis() throws ParseException {
    trace_call("ForwardAxis");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHILD:
        jj_consume_token(CHILD);
        jj_consume_token(DBCOLON);
        break;
      case DESCENDANT:
        jj_consume_token(DESCENDANT);
        jj_consume_token(DBCOLON);
        break;
      case ATTRIBUTE:
        jj_consume_token(ATTRIBUTE);
        jj_consume_token(DBCOLON);
        break;
      case SELF:
        jj_consume_token(SELF);
        jj_consume_token(DBCOLON);
        break;
      case DESCENDANTORSELF:
        jj_consume_token(DESCENDANTORSELF);
        jj_consume_token(DBCOLON);
        break;
      case FOLLOWINGSIBLING:
        jj_consume_token(FOLLOWINGSIBLING);
        jj_consume_token(DBCOLON);
        break;
      case FOLLOWING:
        jj_consume_token(FOLLOWING);
        jj_consume_token(DBCOLON);
        break;
      case NAMESPACE:
        jj_consume_token(NAMESPACE);
        jj_consume_token(DBCOLON);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ForwardAxis");
    }
  }

// [31]    	AbbrevForwardStep 	   ::=    	"@"? NodeTest
  final public void AbbrevForwardStep() throws ParseException {
    trace_call("AbbrevForwardStep");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        jj_consume_token(AT);
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      NodeTest();
    } finally {
      trace_return("AbbrevForwardStep");
    }
  }

// [32]    	ReverseStep 	   ::=    	(ReverseAxis NodeTest) | AbbrevReverseStep
  final public void ReverseStep() throws ParseException {
    trace_call("ReverseStep");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARENT:
      case ANCESTOR:
      case PRECEDINGSIBLING:
      case PRECEDING:
      case ANCESTORORSELF:
        ReverseAxis();
        NodeTest();
        break;
      case DBPOINT:
        AbbrevReverseStep();
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ReverseStep");
    }
  }

// [33]    	ReverseAxis 	   ::=    	("parent" "::")| ("ancestor" "::")| ("preceding-sibling" "::")| ("preceding""::")
//| ("ancestor-or-self" "::")
  final public void ReverseAxis() throws ParseException {
    trace_call("ReverseAxis");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARENT:
        jj_consume_token(PARENT);
        jj_consume_token(DBCOLON);
        break;
      case ANCESTOR:
        jj_consume_token(ANCESTOR);
        jj_consume_token(DBCOLON);
        break;
      case PRECEDINGSIBLING:
        jj_consume_token(PRECEDINGSIBLING);
        jj_consume_token(DBCOLON);
        break;
      case PRECEDING:
        jj_consume_token(PRECEDING);
        jj_consume_token(DBCOLON);
        break;
      case ANCESTORORSELF:
        jj_consume_token(ANCESTORORSELF);
        jj_consume_token(DBCOLON);
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ReverseAxis");
    }
  }

// [34]    	AbbrevReverseStep 	   ::=    	".."
  final public void AbbrevReverseStep() throws ParseException {
    trace_call("AbbrevReverseStep");
    try {
      jj_consume_token(DBPOINT);
    } finally {
      trace_return("AbbrevReverseStep");
    }
  }

// [35]    	NodeTest 	   ::=    	KindTest | NameTest
  final public void NodeTest() throws ParseException {
    trace_call("NodeTest");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_ROUND_BRACKET:
      case ELEMENT:
      case NODE:
      case DOCUMENTNODE:
      case TEXT:
      case COMMENT:
      case PROCESSINGINSTRUCTION:
      case SCHEMAATTRIBUTE:
      case SCHEMAELEMENT:
        KindTest();
        break;
      default:
        jj_la1[111] = jj_gen;
        NameTest();
      }
    } finally {
      trace_return("NodeTest");
    }
  }

// [36]    	NameTest 	   ::=    	QName | Wildcard
  final public void NameTest() throws ParseException {
    trace_call("NameTest");
    try {
      QName();
    } finally {
      trace_return("NameTest");
    }
  }

//[37]    	Wildcard 	   ::=    	"*" | (NCName ":" "*") | ("*" ":" NCName)
  final public void Wildcard() throws ParseException {
    trace_call("Wildcard");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          NCName();
          break;
        default:
          jj_la1[112] = jj_gen;
          ;
        }
        break;
      case COLON:
        NCName();
        jj_consume_token(COLON);
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Wildcard");
    }
  }

// [38]    	FilterExpr 	   ::=    	PrimaryExpr PredicateList
  final public void FilterExpr() throws ParseException {
    trace_call("FilterExpr");
    try {
      PrimaryExpr();
      PredicateList();
    } finally {
      trace_return("FilterExpr");
    }
  }

// [39]    	PredicateList 	   ::=    	Predicate*
  final public void PredicateList() throws ParseException {
    trace_call("PredicateList");
    try {
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_SQUARED_BRACKET:
          ;
          break;
        default:
          jj_la1[114] = jj_gen;
          break label_28;
        }
        Predicate();
      }
    } finally {
      trace_return("PredicateList");
    }
  }

// [40]    	Predicate 	   ::=    	"[" Expr "]"
  final public void Predicate() throws ParseException {
    trace_call("Predicate");
    try {
      jj_consume_token(OPENING_SQUARED_BRACKET);
      Expr_XPath();
      jj_consume_token(CLOSING_SQUARED_BRACKET);
    } finally {
      trace_return("Predicate");
    }
  }

//[41]    	PrimaryExpr 	   ::=    	Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall
  final public void PrimaryExpr() throws ParseException {
    trace_call("PrimaryExpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case BASECHAR:
        Literal();
        break;
      case DOLLAR:
        VarRef();
        break;
      case OPENING_ROUND_BRACKET:
        ParenthesizedExpr();
        break;
      case POINT:
        ContextItemExpr();
        break;
      case COLON:
        FunctionCall();
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimaryExpr");
    }
  }

// [42]    	Literal 	   ::=    	NumericLiteral | StringLiteral
  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        NumericLiteral();
        break;
      case BASECHAR:
        label_29:
        while (true) {
          jj_consume_token(BASECHAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BASECHAR:
            ;
            break;
          default:
            jj_la1[116] = jj_gen;
            break label_29;
          }
        }
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Literal");
    }
  }

// [43]    	NumericLiteral 	   ::=    	IntegerLiteral | DecimalLiteral | DoubleLiteral
  final public void NumericLiteral() throws ParseException {
    trace_call("NumericLiteral");
    try {
      label_30:
      while (true) {
        jj_consume_token(DIGIT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
          ;
          break;
        default:
          jj_la1[118] = jj_gen;
          break label_30;
        }
      }
    } finally {
      trace_return("NumericLiteral");
    }
  }

// [44]    	VarRef 	   ::=    	"$" VarName
  final public void VarRef() throws ParseException {
    trace_call("VarRef");
    try {
      jj_consume_token(DOLLAR);
      VarName();
    } finally {
      trace_return("VarRef");
    }
  }

// [45]    	VarName 	   ::=    	QName
  final public void VarName() throws ParseException {
    trace_call("VarName");
    try {
      QName();
    } finally {
      trace_return("VarName");
    }
  }

// [46]    	ParenthesizedExpr 	   ::=    	"(" Expr? ")"
  final public void ParenthesizedExpr() throws ParseException {
    trace_call("ParenthesizedExpr");
    try {
      jj_consume_token(OPENING_ROUND_BRACKET);
      Expr_XPath();
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("ParenthesizedExpr");
    }
  }

// [47]    	ContextItemExpr 	   ::=    	"."
  final public void ContextItemExpr() throws ParseException {
    trace_call("ContextItemExpr");
    try {
      jj_consume_token(POINT);
    } finally {
      trace_return("ContextItemExpr");
    }
  }

// [48]    	FunctionCall 	   ::=    	QName "(" (ExprSingle ("," ExprSingle)*)? ")"
  final public void FunctionCall() throws ParseException {
    trace_call("FunctionCall");
    try {
      QName();
      jj_consume_token(OPENING_ROUND_BRACKET);
      ExprSingle();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_31;
        }
        jj_consume_token(COMMA);
        ExprSingle();
      }
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("FunctionCall");
    }
  }

//  [49]    	SingleType 	   ::=    	AtomicType "?"?
  final public void SingleType() throws ParseException {
    trace_call("SingleType");
    try {
      AtomicType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION_MARK:
        jj_consume_token(QUESTION_MARK);
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
    } finally {
      trace_return("SingleType");
    }
  }

// [50]    	SequenceType 	   ::=    	("empty-sequence" "(" ")") | (ItemType OccurrenceIndicator?)
  final public void SequenceType() throws ParseException {
    trace_call("SequenceType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTYSEQUENCE:
        jj_consume_token(EMPTYSEQUENCE);
        jj_consume_token(OPENING_ROUND_BRACKET);
        jj_consume_token(CLOSING_ROUND_BRACKET);
        break;
      default:
        jj_la1[122] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_ROUND_BRACKET:
        case STAR:
        case PLUS:
        case QUESTION_MARK:
        case COLON:
        case ELEMENT:
        case ITEM:
        case NODE:
        case DOCUMENTNODE:
        case TEXT:
        case COMMENT:
        case PROCESSINGINSTRUCTION:
        case SCHEMAATTRIBUTE:
        case SCHEMAELEMENT:
          ItemType();
          OccurrenceIndicator();
          break;
        default:
          jj_la1[121] = jj_gen;
          ;
        }
      }
    } finally {
      trace_return("SequenceType");
    }
  }

//  [51]    	OccurrenceIndicator 	   ::=    	"?" | "*" | "+"
  final public void OccurrenceIndicator() throws ParseException {
    trace_call("OccurrenceIndicator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION_MARK:
        jj_consume_token(QUESTION_MARK);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OccurrenceIndicator");
    }
  }

// [52]    	ItemType 	   ::=    	KindTest | ("item" "(" ")") | AtomicType
  final public void ItemType() throws ParseException {
    trace_call("ItemType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_ROUND_BRACKET:
      case ELEMENT:
      case NODE:
      case DOCUMENTNODE:
      case TEXT:
      case COMMENT:
      case PROCESSINGINSTRUCTION:
      case SCHEMAATTRIBUTE:
      case SCHEMAELEMENT:
        KindTest();
        break;
      case ITEM:
        jj_consume_token(ITEM);
        jj_consume_token(OPENING_ROUND_BRACKET);
        jj_consume_token(CLOSING_ROUND_BRACKET);
        break;
      default:
        jj_la1[124] = jj_gen;
        AtomicType();
      }
    } finally {
      trace_return("ItemType");
    }
  }

// [53]    	AtomicType 	   ::=    	QName
  final public void AtomicType() throws ParseException {
    trace_call("AtomicType");
    try {
      QName();
    } finally {
      trace_return("AtomicType");
    }
  }

// [54]    	KindTest 	   ::=    	DocumentTest| ElementTest| AttributeTest| SchemaElementTest| SchemaAttributeTest
// | PITest| CommentTest| TextTest| AnyKindTest
  final public void KindTest() throws ParseException {
    trace_call("KindTest");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENTNODE:
        DocumentTest();
        break;
      case ELEMENT:
        ElementTest();
        break;
      case OPENING_ROUND_BRACKET:
        AttributeTest();
        break;
      case SCHEMAELEMENT:
        SchemaElementTest();
        break;
      case SCHEMAATTRIBUTE:
        SchemaAttributeTest();
        break;
      case PROCESSINGINSTRUCTION:
        PITest();
        break;
      case COMMENT:
        CommentTest();
        break;
      case TEXT:
        TextTest();
        break;
      case NODE:
        AnyKindTest();
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("KindTest");
    }
  }

// [55]    	AnyKindTest 	   ::=    	"node" "(" ")"
  final public void AnyKindTest() throws ParseException {
    trace_call("AnyKindTest");
    try {
      jj_consume_token(NODE);
      jj_consume_token(OPENING_ROUND_BRACKET);
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("AnyKindTest");
    }
  }

// [56]    	DocumentTest 	   ::=    	"document-node" "(" (ElementTest | SchemaElementTest)? ")"
  final public void DocumentTest() throws ParseException {
    trace_call("DocumentTest");
    try {
      jj_consume_token(DOCUMENTNODE);
      jj_consume_token(OPENING_ROUND_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELEMENT:
      case SCHEMAELEMENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELEMENT:
          ElementTest();
          break;
        case SCHEMAELEMENT:
          SchemaElementTest();
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("DocumentTest");
    }
  }

// [57]    	TextTest 	   ::=    	"text" "(" ")"
  final public void TextTest() throws ParseException {
    trace_call("TextTest");
    try {
      jj_consume_token(TEXT);
      jj_consume_token(OPENING_ROUND_BRACKET);
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("TextTest");
    }
  }

// [58]    	CommentTest 	   ::=    	"comment" "(" ")"
  final public void CommentTest() throws ParseException {
    trace_call("CommentTest");
    try {
      jj_consume_token(COMMENT);
      jj_consume_token(OPENING_ROUND_BRACKET);
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("CommentTest");
    }
  }

// [59]    	PITest 	   ::=    	"processing-instruction" "(" (NCName | StringLiteral)? ")"
  final public void PITest() throws ParseException {
    trace_call("PITest");
    try {
      jj_consume_token(PROCESSINGINSTRUCTION);
      jj_consume_token(OPENING_ROUND_BRACKET);
      NCName();
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("PITest");
    }
  }

// [60]    	AttributeTest 	   ::=    	"attribute" "(" (AttribNameOrWildcard ("," TypeName)?)? ")"
  final public void AttributeTest() throws ParseException {
    trace_call("AttributeTest");
    try {
      jj_consume_token(OPENING_ROUND_BRACKET);
      AttribNameOrWildcard();
      jj_consume_token(COMMA);
      TypeName();
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("AttributeTest");
    }
  }

// [61]    	AttribNameOrWildcard 	   ::=    	AttributeName | "*"
  final public void AttribNameOrWildcard() throws ParseException {
    trace_call("AttribNameOrWildcard");
    try {
      AttributeName();
    } finally {
      trace_return("AttribNameOrWildcard");
    }
  }

// [62]    	SchemaAttributeTest 	   ::=    	"schema-attribute" "(" AttributeDeclaration ")"
  final public void SchemaAttributeTest() throws ParseException {
    trace_call("SchemaAttributeTest");
    try {
      jj_consume_token(SCHEMAATTRIBUTE);
      jj_consume_token(OPENING_ROUND_BRACKET);
      AttributeDeclaration();
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("SchemaAttributeTest");
    }
  }

// [63]    	AttributeDeclaration 	   ::=    	AttributeName
  final public void AttributeDeclaration() throws ParseException {
    trace_call("AttributeDeclaration");
    try {
      AttributeName();
    } finally {
      trace_return("AttributeDeclaration");
    }
  }

// [64]    	ElementTest 	   ::=    	"element" "(" (ElementNameOrWildcard ("," TypeName "?"?)?)? ")"
  final public void ElementTest() throws ParseException {
    trace_call("ElementTest");
    try {
      jj_consume_token(ELEMENT);
      jj_consume_token(OPENING_ROUND_BRACKET);
      ElementNameOrWildcard();
      jj_consume_token(COMMA);
      TypeName();
      jj_consume_token(QUESTION_MARK);
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("ElementTest");
    }
  }

// [65]    	ElementNameOrWildcard 	   ::=    	ElementName | "*"
  final public void ElementNameOrWildcard() throws ParseException {
    trace_call("ElementNameOrWildcard");
    try {
      ElementName();
    } finally {
      trace_return("ElementNameOrWildcard");
    }
  }

// [66]    	SchemaElementTest 	   ::=    	"schema-element" "(" ElementDeclaration ")"
  final public void SchemaElementTest() throws ParseException {
    trace_call("SchemaElementTest");
    try {
      jj_consume_token(SCHEMAELEMENT);
      jj_consume_token(OPENING_ROUND_BRACKET);
      ElementDeclaration();
      jj_consume_token(CLOSING_ROUND_BRACKET);
    } finally {
      trace_return("SchemaElementTest");
    }
  }

// [67]    	ElementDeclaration 	   ::=    	ElementName
  final public void ElementDeclaration() throws ParseException {
    trace_call("ElementDeclaration");
    try {
      ElementName();
    } finally {
      trace_return("ElementDeclaration");
    }
  }

// [68]    	AttributeName 	   ::=    	QName
  final public void AttributeName() throws ParseException {
    trace_call("AttributeName");
    try {
      QName();
    } finally {
      trace_return("AttributeName");
    }
  }

// [69]    	ElementName 	   ::=    	QName
  final public void ElementName() throws ParseException {
    trace_call("ElementName");
    try {
      QName();
    } finally {
      trace_return("ElementName");
    }
  }

// [70]    	TypeName 	   ::=    	QName
  final public void TypeName() throws ParseException {
    trace_call("TypeName");
    try {
      QName();
    } finally {
      trace_return("TypeName");
    }
  }

// Qualified Name; http://www.w3.org/TR/REC-xml-names/#NT-QName
// [7]   	QName	   ::=   	PrefixedName | UnprefixedName
  final public void QName() throws ParseException {
    trace_call("QName");
    try {
      if (jj_2_13(2)) {
        Prefix();
        jj_consume_token(COLON);
      } else {
        ;
      }
      LocalPart();
    } finally {
      trace_return("QName");
    }
  }

// [8]   	PrefixedName	   ::=   	Prefix ':' LocalPart
  final public void PrefixedName() throws ParseException {
    trace_call("PrefixedName");
    try {
      Prefix();
      jj_consume_token(COLON);
      LocalPart();
    } finally {
      trace_return("PrefixedName");
    }
  }

// [9]   	UnprefixedName	   ::=   	LocalPart
  final public void UnprefixedName() throws ParseException {
    trace_call("UnprefixedName");
    try {
      LocalPart();
    } finally {
      trace_return("UnprefixedName");
    }
  }

// [10]   	Prefix	   ::=   	NCName
  final public void Prefix() throws ParseException {
    trace_call("Prefix");
    try {
      NCName();
    } finally {
      trace_return("Prefix");
    }
  }

// [11]   	LocalPart	   ::=   	NCName
  final public void LocalPart() throws ParseException {
    trace_call("LocalPart");
    try {
      NCName();
    } finally {
      trace_return("LocalPart");
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_3R_139() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_122()) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    if (jj_3R_121()) return true;
    if (jj_scan_token(CLOSING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    if (jj_scan_token(116)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(116)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    if (jj_scan_token(115)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(115)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_scan_token(ANDLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(MISSING)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(VAR_OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(OPENING_SQUARED_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(DOUBLESLASH)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(MISSING)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    return false;
  }

  final private boolean jj_3R_62() {
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) return true;
    }
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(DEFAULTT)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(ANCESTORORSELF)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(PRECEDING)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(PRECEDINGSIBLING)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(ANCESTOR)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(PARENT)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(VAROR_LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_63()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(QUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    if (jj_scan_token(QUOT_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(DEFAULTT)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(FOLLOWING)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(FOLLOWINGSIBLING)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(DESCENDANTORSELF)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(SELF)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(DESCENDANT)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(CHILD)) return true;
    if (jj_scan_token(DBCOLON)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(FIXED)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(VAR_LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(DOUBLESLASH)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(SKIPP)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(SCHEMAELEMENT)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(FIXED)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(LIST_COMMA)) return true;
    if (jj_scan_token(LIST_LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(LAX)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(ELEMENT)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(MISSING)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(SCHEMAATTRIBUTE)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(STRICT)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    if (jj_3R_203()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(START_LIST)) return true;
    if (jj_scan_token(LIST_LABEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_LIST)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(PROCESSINGINSTRUCTION)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(ATTRIBUTEGROUP)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(CASTABLE)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(TEXT)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(ATTRIBUTEGROUP)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_129()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(TREAT)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(DOCUMENTNODE)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(OPENING_ROUND_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(INSTANCE)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(OPENING_SQUARED_BRACKET)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSING_SQUARED_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(ATTRIBUTE)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(OPENING_CURLY_BRACKET)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(CLOSING_CURLY_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(ELEMENT_STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(ELEMENT)) return true;
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(TO)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  public bonXaiTreeTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[128];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x64040,0x64040,0x0,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x60040,0x0,0x0,0x0,0x700000,0x60040,0x60040,0x8000,0x60000,0x700000,0x40,0x40,0x400000,0x400000,0x10000,0x100020,0x2000,0x700100,0x700100,0xa000,0xa000,0x100020,0x2000,0x700100,0x700100,0xa000,0xa000,0x40,0x400,0x2000,0x100,0x0,0x0,0x400000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x0,0x2000,0x0,0x2000,0x8000,0x0,0x1000,0x1000,0x0,0x20200000,0x20200000,0x100000,0x100000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x20200000,0x1000,0x0,0x0,0x60000,0x60000,0x10000000,0x0,0x0,0x4000,0x10000000,0x0,0x40,0x2000000,0x2100000,0x100,0xa000040,0x0,0x0,0x0,0x2000,0x400000,0x2700040,0x0,0x700000,0x40,0x40,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x66,0x800,0x80,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x700,0x700,0x700,0x0,0x3000,0x3000,0x3000,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xeb1008,0xea1008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe81000,0x0,0x0,0x0,0xe81000,0xe06000,0x0,0x6000,0x0,0x6000,0x0,0xe00000,0x1000010,0x1000010,0x1000010,0x1000010,0x0,0x20008,0x1000010,0x1000010,0x0,0x0,0x0,0x0,0x64000000,0x0,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4004,0x4004,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80000,0x80000,0x80000,0x80000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x8,0x7ffe0000,0x7ffe0000,0x10,0x0,0x0,0xe0,0xe0,0x100,0x600,0x600,0x800,0x2000,0x8000,0x10000,0x0,0x3e0000,0xfc00000,0x70000000,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3000000,0xc0000000,0x3c000000,0x38000000,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e0,0x1f,0x1f,0x0,0x3e0,0x3e0,0x7f000,0x0,0x0,0x0,0x180000,0x100000,0x180000,0x80000,0x0,0x0,0x7f800,0x400,0x0,0x7f800,0x7f000,0x40000,0x40000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1021a,0x1021a,0x1000,0x202,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1021a,0x10010,0x1021a,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x202,0x600000,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public bonXaiTree(java.io.InputStream stream) {
     this(stream, null);
  }
  public bonXaiTree(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new bonXaiTreeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 128; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 128; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public bonXaiTree(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new bonXaiTreeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 128; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 128; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public bonXaiTree(bonXaiTreeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 128; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(bonXaiTreeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 128; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[161];
    for (int i = 0; i < 161; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 128; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 161; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

  final public void enable_tracing() {
    trace_enabled = true;
  }

  final public void disable_tracing() {
    trace_enabled = false;
  }

  final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
