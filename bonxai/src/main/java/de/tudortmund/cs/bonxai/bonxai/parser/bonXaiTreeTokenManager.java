/* Generated By:JJTree&JavaCC: Do not edit this line. bonXaiTreeTokenManager.java */
package de.tudortmund.cs.bonxai.bonxai.parser;
import java.util.*;

public class bonXaiTreeTokenManager implements bonXaiTreeConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 153);
      case 34:
         return jjStopAtPos(0, 154);
      default :
         return jjMoveNfa_4(2, 0);
   }
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xfffff00000000000L, 0x7fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec4 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec7 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec8 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec9 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec10 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec11 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec13 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec15 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec17 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec20 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec21 = {
   0x0L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec22 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 152;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 151;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 142);
      case 44:
         return jjStopAtPos(0, 141);
      case 58:
         return jjStopAtPos(0, 146);
      case 64:
         return jjStopAtPos(0, 145);
      case 123:
         return jjStopAtPos(0, 143);
      case 124:
         return jjStopAtPos(0, 140);
      case 125:
         return jjStopAtPos(0, 144);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xefffffffc0000000L) != 0L || (active1 & 0x307ffff9fc1ffffL) != 0L)
         {
            jjmatchedKind = 116;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0xefffffffc0000000L) != 0L || (active1 & 0x307ffff9fc1ffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xe7ffffffc0000000L) != 0L || (active1 & 0x307ffff8001afeeL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0xe3bffdffc0000000L) != 0L || (active1 & 0x307ffff8001af46L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0xc33ffdf7c0000000L) != 0L || (active1 & 0x307a7fd8000af00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x823e6df740000000L) != 0L || (active1 & 0x307a7fd00008e00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x801e64b740000000L) != 0L || (active1 & 0x107a7dd00008a00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x801460a640000000L) != 0L || (active1 & 0x727dd00008a00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x801460a640000000L) != 0L || (active1 & 0x7279d00000200L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20a200000000L) != 0L || (active1 & 0x7268d00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x208200000000L) != 0L || (active1 & 0x7268c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x200200000000L) != 0L || (active1 & 0x7268c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x200200000000L) != 0L || (active1 & 0x7268c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x200200000000L) != 0L || (active1 & 0x7068c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x200200000000L) != 0L || (active1 & 0x3028c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x3028c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008c00000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0x1000400000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 34:
         return jjStopAtPos(0, 23);
      case 36:
         return jjStopAtPos(0, 60);
      case 38:
         return jjStopAtPos(0, 16);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStopAtPos(0, 20);
      case 43:
         return jjStopAtPos(0, 21);
      case 44:
         return jjStopAtPos(0, 13);
      case 45:
         return jjStopAtPos(0, 29);
      case 46:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 47:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 58:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 60:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20080000L);
      case 61:
         return jjStopAtPos(0, 12);
      case 62:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40200000L);
      case 63:
         return jjStopAtPos(0, 22);
      case 64:
         return jjStopAtPos(0, 14);
      case 91:
         return jjStopAtPos(0, 8);
      case 92:
         return jjStopAtPos(0, 19);
      case 93:
         return jjStopAtPos(0, 9);
      case 95:
         return jjStopAtPos(0, 24);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x600040000000L, 0x24000004008L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x800080018000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3200000000L, 0x200500000020L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4019000000000000L, 0x40000400404L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x500000000000000L, 0x200001800000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x180100000000L, 0xc000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800004000000000L, 0x80010000a41L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x3000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x6800000000000L, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x100000800000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x101a000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000080000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa0a0000000000000L, 0x6000200000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x400000002012L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x100L);
      case 123:
         return jjStopAtPos(0, 10);
      case 124:
         return jjStopAtPos(0, 15);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 47:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 58:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 60:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 61:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 62:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040002400000000L, active1, 0x2000018000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         return jjMoveStringLiteralDfa2_0(active0, 0x200061200000000L, active1, 0x400700000000L);
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000002L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x106800000000000L, active1, 0x20L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0x40000000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10040000000L, active1, 0x24000000b08L);
      case 111:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0x2400008080000000L, active1, 0xb01800000080L);
      case 113:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x180100000000L, active1, 0x1018000002000L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         return jjMoveStringLiteralDfa2_0(active0, 0x20600000000000L, active1, 0x300080000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x224000000400L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4018000000000000L, active1, 0x98000002002L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000000000L, active1, 0x80000140L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1a00000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000400000000L, active1, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180080000000L, active1, 0x1000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004800000000L, active1, 0x200040000000000L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0x500018804L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8200602000000000L, active1, 0x100000000000200L);
      case 118:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      case 120:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0x100800000000000L, active1, 0x400000000000L);
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x3200000000L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1018500000000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(3, 66);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 108);
         return jjMoveStringLiteralDfa4_0(active0, 0x100800400000000L, active1, 0x6026000000600L);
      case 102:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 97);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1880000000L);
      case 109:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 107);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000100000000L, active1, 0x800000000000L);
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(3, 65);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4040000000L, active1, 0x100L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000640000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x6008000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000080000000L, active1, 0x40000008800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200180000000000L, active1, 0x200000000000L);
      case 118:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L);
      case 58:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 56);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 95);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x18040000000000L, active1, 0x1818500000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x6600000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x6200000000000L);
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(4, 72);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000000L);
      case 112:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200004000000000L, active1, 0x200L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000400000000L, active1, 0x24000000000L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(4, 77);
         return jjMoveStringLiteralDfa5_0(active0, 0xa040000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x11200000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(4, 62);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L);
      case 47:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 121);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000L, active1, 0x6000000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000000L, active1, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18000000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000040000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1200000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         return jjMoveStringLiteralDfa6_0(active0, 0x1e000000000000L, active1, 0x800500000800L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000200L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(5, 53);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(5, 74);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x24000000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1800000000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         break;
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6000000000000L);
      case 47:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 120);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x500000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 103:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000040000000L, active1, 0x19800000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x24000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         break;
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1040000000000L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 111);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000200000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x600000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x14000200000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000500000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0x200L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(7, 75);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(7, 79);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000002000000000L, active1, 0x4040000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x19800000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x600000000000L, active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(8, 52);
         break;
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x220000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8800000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 30);
         return jjMoveStringLiteralDfa9_0(active0, 0x8200000000L, active1, 0x1000500000000L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 63);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(8, 73);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L);
      case 124:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(8, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(9, 37);
         break;
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0x8800000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000L);
      case 116:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0x2000400000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000400000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L, active1, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2020000000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(10, 39);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8800000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L, active1, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x3008800000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2008800000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000000L);
      case 101:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(12, 109);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x5000000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L, active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000L);
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(13, 106);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8800000000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000000L);
      case 116:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(13, 114);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L, active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8800000000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000000000L);
      case 112:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(14, 45);
         break;
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(15, 113);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x400000000L);
      case 102:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(15, 105);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8800000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(16, 33);
         break;
      case 103:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(16, 99);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(16, 103);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active1, 0x1000000000000L);
      case 102:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(17, 98);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private final int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(21, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
static final long[] jjbitVec24 = {
   0x0L, 0xffffffffffffc000L, 0x7fffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x3fe00000080L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0x30000003fL, 0x0L, 0x0L
};
static final long[] jjbitVec28 = {
   0x0L, 0x0L, 0x78L, 0x0L
};
static final long[] jjbitVec29 = {
   0x0L, 0x0L, 0xbbfffffbfffe0000L, 0x16L
};
static final long[] jjbitVec30 = {
   0x0L, 0x100000007f800L, 0x0L, 0x3d9fffc00000L
};
static final long[] jjbitVec31 = {
   0xd00000000000000eL, 0xc001e3fffL, 0xd00000000000000eL, 0xc0080399fL
};
static final long[] jjbitVec32 = {
   0xd000000000000004L, 0x3000000003987L, 0xd00000000000000eL, 0x3bbfL
};
static final long[] jjbitVec33 = {
   0xd00000000000000eL, 0xc0398fL, 0xc00000000000000cL, 0x803dc7L
};
static final long[] jjbitVec34 = {
   0xc00000000000000eL, 0x603ddfL, 0xc00000000000000cL, 0x603ddfL
};
static final long[] jjbitVec35 = {
   0xc00000000000000cL, 0x803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x7f2000000000000L, 0x7f80L, 0x1bf2000000000000L, 0x3f00L
};
static final long[] jjbitVec37 = {
   0xc2a0000003000000L, 0xfffe000000000000L, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec39 = {
   0xfc0000000000L, 0x0L, 0x6000000L, 0x0L
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x80000000000000L, 0x0L
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x0L, 0x30000L
};
static final long[] jjbitVec42 = {
   0x0L, 0x0L, 0x80L, 0x0L
};
static final long[] jjbitVec43 = {
   0x0L, 0x1L, 0x0L, 0x0L
};
static final long[] jjbitVec44 = {
   0x0L, 0x40L, 0x0L, 0x40L
};
static final long[] jjbitVec45 = {
   0x3e000000000020L, 0x0L, 0x60000000L, 0x7000000000000000L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 5;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     kind = 116;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 117)
                     kind = 117;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 118)
                     kind = 118;
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 119)
                     kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 161);
      case 123:
         return jjStopAtPos(0, 160);
      case 125:
         return jjStopAtPos(0, 162);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 159;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 128);
      case 13:
         return jjStopAtPos(0, 127);
      case 32:
         return jjStopAtPos(0, 126);
      case 46:
         return jjStopAtPos(0, 123);
      case 47:
         return jjStopAtPos(0, 124);
      default :
         return jjMoveNfa_1(2, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 125;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 122;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 131);
      case 58:
         return jjStopAtPos(0, 133);
      case 64:
         return jjStopAtPos(0, 132);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec23[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec26[i2] & l2) != 0L);
      default : 
         if ((jjbitVec24[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec45[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", "\133", "\135", "\173", 
"\175", "\75", "\54", "\100", "\174", "\46", "\57", "\57\57", "\134", "\52", "\53", 
"\77", "\42", "\137", "\72", "\72\72", "\56", "\56\56", "\55", 
"\141\156\156\157\164\141\151\157\156", "\162\157\157\164\163", "\147\162\141\155\155\141\162", 
"\144\145\146\141\165\154\164\40\156\141\155\145\163\160\141\143\145", "\156\141\155\145\163\160\141\143\145", "\164\171\160\145", 
"\144\145\146\141\165\154\164", "\144\141\164\141\164\171\160\145\163\40", "\151\155\160\157\162\164", 
"\143\157\156\163\164\162\141\151\156\164\163", "\165\156\151\161\165\145", "\153\145\171", "\153\145\171\162\145\146\40", 
"\147\162\157\165\160\163", "\147\162\157\165\160", 
"\141\164\164\162\151\142\165\164\145\55\147\162\157\165\160", "\141\164\164\162\151\142\165\164\145", "\155\151\170\145\144", 
"\145\155\160\164\171", "\155\151\163\163\151\156\147", "\155\151\163\163\151\156\147\40\174", 
"\145\154\145\155\145\156\164", "\145\154\145\155\145\156\164\40\52", "\163\164\162\151\143\164", 
"\154\141\170", "\163\153\151\160", "\146\151\170\145\144", "\162\145\164\165\162\156", 
"\146\157\162", "\151\156", "\44", "\163\157\155\145", "\145\166\145\162\171", 
"\163\141\164\151\163\146\151\145\163", "\151\146", "\164\150\145\156", "\145\154\163\145", "\141\156\144", 
"\164\157", "\144\151\166", "\151\144\151\166", "\155\157\144", "\165\156\151\157\156", 
"\151\156\164\145\162\163\145\143\164", "\145\170\143\145\160\164", "\151\156\163\164\141\156\143\145", "\157\146", 
"\164\162\145\141\164", "\141\163", "\143\141\163\164\141\142\154\145", "\143\141\163\164", "\41\75", 
"\74", "\74\75", "\76", "\76\75", "\145\161", "\156\145", "\154\164", "\154\145", 
"\147\164", "\147\145", "\151\163", "\74\74", "\76\76", "\143\150\151\154\144", 
"\144\145\163\143\145\156\144\141\156\164", "\163\145\154\146", 
"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146", "\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147", 
"\146\157\154\154\157\167\151\156\147", "\160\141\162\145\156\164", "\141\156\143\145\163\164\157\162", 
"\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147", "\160\162\145\143\145\144\151\156\147", 
"\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146", "\145\155\160\164\171\55\163\145\161\165\145\156\143\145", "\151\164\145\155", 
"\156\157\144\145", "\144\157\143\165\155\145\156\164\55\156\157\144\145", "\164\145\170\164", 
"\143\157\155\155\145\156\164", 
"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\143\150\145\155\141\55\141\164\164\162\151\142\165\164\145", 
"\163\143\150\145\155\141\55\145\154\145\155\145\156\164", null, null, null, null, null, "\150\164\164\160\72\57\57", 
"\146\164\160\72\57\57", null, "\56", "\57", null, "\40", "\15", "\12", null, null, "\50", "\100", 
"\72", null, null, null, null, null, null, "\174", "\54", "\51", "\173", "\175", 
"\100", "\72", null, null, null, null, null, null, "\40", "\42", null, null, null, 
null, null, "\173", "\54", "\175", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "URI", 
   "VARIABLE", 
   "VARIABLE_OR", 
   "QUOTATION", 
   "NAMESPACE_LIST", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, 4, -1, 
   2, -1, -1, -1, -1, -1, 3, -1, -1, 2, 2, -1, 2, -1, -1, -1, 2, 2, -1, 2, 2, 2, -1, -1, -1, 
   -1, 2, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 
   -1, 0, 0, 0, 0, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x78787fc3fL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x787803c0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[5];
private final int[] jjstateSet = new int[10];
protected char curChar;
public bonXaiTreeTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public bonXaiTreeTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 5; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
